
greenhouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000303c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  0800314c  0800314c  0001314c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003190  08003190  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08003190  08003190  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003190  08003190  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003190  08003190  00013190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003194  08003194  00013194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08003198  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000020  080031b8  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  080031b8  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007fc6  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000158b  00000000  00000000  0002800f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000728  00000000  00000000  000295a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006a0  00000000  00000000  00029cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ff7  00000000  00000000  0002a368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008cb6  00000000  00000000  0004135f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084b24  00000000  00000000  0004a015  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ceb39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e24  00000000  00000000  000ceb8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000020 	.word	0x20000020
 800012c:	00000000 	.word	0x00000000
 8000130:	08003134 	.word	0x08003134

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000024 	.word	0x20000024
 800014c:	08003134 	.word	0x08003134

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <__aeabi_drsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000168:	e002      	b.n	8000170 <__adddf3>
 800016a:	bf00      	nop

0800016c <__aeabi_dsub>:
 800016c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000170 <__adddf3>:
 8000170:	b530      	push	{r4, r5, lr}
 8000172:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000176:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800017a:	ea94 0f05 	teq	r4, r5
 800017e:	bf08      	it	eq
 8000180:	ea90 0f02 	teqeq	r0, r2
 8000184:	bf1f      	itttt	ne
 8000186:	ea54 0c00 	orrsne.w	ip, r4, r0
 800018a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000192:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000196:	f000 80e2 	beq.w	800035e <__adddf3+0x1ee>
 800019a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001a2:	bfb8      	it	lt
 80001a4:	426d      	neglt	r5, r5
 80001a6:	dd0c      	ble.n	80001c2 <__adddf3+0x52>
 80001a8:	442c      	add	r4, r5
 80001aa:	ea80 0202 	eor.w	r2, r0, r2
 80001ae:	ea81 0303 	eor.w	r3, r1, r3
 80001b2:	ea82 0000 	eor.w	r0, r2, r0
 80001b6:	ea83 0101 	eor.w	r1, r3, r1
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	2d36      	cmp	r5, #54	; 0x36
 80001c4:	bf88      	it	hi
 80001c6:	bd30      	pophi	{r4, r5, pc}
 80001c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x70>
 80001da:	4240      	negs	r0, r0
 80001dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001ec:	d002      	beq.n	80001f4 <__adddf3+0x84>
 80001ee:	4252      	negs	r2, r2
 80001f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f4:	ea94 0f05 	teq	r4, r5
 80001f8:	f000 80a7 	beq.w	800034a <__adddf3+0x1da>
 80001fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000200:	f1d5 0e20 	rsbs	lr, r5, #32
 8000204:	db0d      	blt.n	8000222 <__adddf3+0xb2>
 8000206:	fa02 fc0e 	lsl.w	ip, r2, lr
 800020a:	fa22 f205 	lsr.w	r2, r2, r5
 800020e:	1880      	adds	r0, r0, r2
 8000210:	f141 0100 	adc.w	r1, r1, #0
 8000214:	fa03 f20e 	lsl.w	r2, r3, lr
 8000218:	1880      	adds	r0, r0, r2
 800021a:	fa43 f305 	asr.w	r3, r3, r5
 800021e:	4159      	adcs	r1, r3
 8000220:	e00e      	b.n	8000240 <__adddf3+0xd0>
 8000222:	f1a5 0520 	sub.w	r5, r5, #32
 8000226:	f10e 0e20 	add.w	lr, lr, #32
 800022a:	2a01      	cmp	r2, #1
 800022c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000230:	bf28      	it	cs
 8000232:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	18c0      	adds	r0, r0, r3
 800023c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000240:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000244:	d507      	bpl.n	8000256 <__adddf3+0xe6>
 8000246:	f04f 0e00 	mov.w	lr, #0
 800024a:	f1dc 0c00 	rsbs	ip, ip, #0
 800024e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000252:	eb6e 0101 	sbc.w	r1, lr, r1
 8000256:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800025a:	d31b      	bcc.n	8000294 <__adddf3+0x124>
 800025c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000260:	d30c      	bcc.n	800027c <__adddf3+0x10c>
 8000262:	0849      	lsrs	r1, r1, #1
 8000264:	ea5f 0030 	movs.w	r0, r0, rrx
 8000268:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800026c:	f104 0401 	add.w	r4, r4, #1
 8000270:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000274:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000278:	f080 809a 	bcs.w	80003b0 <__adddf3+0x240>
 800027c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000280:	bf08      	it	eq
 8000282:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000286:	f150 0000 	adcs.w	r0, r0, #0
 800028a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028e:	ea41 0105 	orr.w	r1, r1, r5
 8000292:	bd30      	pop	{r4, r5, pc}
 8000294:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000298:	4140      	adcs	r0, r0
 800029a:	eb41 0101 	adc.w	r1, r1, r1
 800029e:	3c01      	subs	r4, #1
 80002a0:	bf28      	it	cs
 80002a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a6:	d2e9      	bcs.n	800027c <__adddf3+0x10c>
 80002a8:	f091 0f00 	teq	r1, #0
 80002ac:	bf04      	itt	eq
 80002ae:	4601      	moveq	r1, r0
 80002b0:	2000      	moveq	r0, #0
 80002b2:	fab1 f381 	clz	r3, r1
 80002b6:	bf08      	it	eq
 80002b8:	3320      	addeq	r3, #32
 80002ba:	f1a3 030b 	sub.w	r3, r3, #11
 80002be:	f1b3 0220 	subs.w	r2, r3, #32
 80002c2:	da0c      	bge.n	80002de <__adddf3+0x16e>
 80002c4:	320c      	adds	r2, #12
 80002c6:	dd08      	ble.n	80002da <__adddf3+0x16a>
 80002c8:	f102 0c14 	add.w	ip, r2, #20
 80002cc:	f1c2 020c 	rsb	r2, r2, #12
 80002d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d4:	fa21 f102 	lsr.w	r1, r1, r2
 80002d8:	e00c      	b.n	80002f4 <__adddf3+0x184>
 80002da:	f102 0214 	add.w	r2, r2, #20
 80002de:	bfd8      	it	le
 80002e0:	f1c2 0c20 	rsble	ip, r2, #32
 80002e4:	fa01 f102 	lsl.w	r1, r1, r2
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	bfdc      	itt	le
 80002ee:	ea41 010c 	orrle.w	r1, r1, ip
 80002f2:	4090      	lslle	r0, r2
 80002f4:	1ae4      	subs	r4, r4, r3
 80002f6:	bfa2      	ittt	ge
 80002f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002fc:	4329      	orrge	r1, r5
 80002fe:	bd30      	popge	{r4, r5, pc}
 8000300:	ea6f 0404 	mvn.w	r4, r4
 8000304:	3c1f      	subs	r4, #31
 8000306:	da1c      	bge.n	8000342 <__adddf3+0x1d2>
 8000308:	340c      	adds	r4, #12
 800030a:	dc0e      	bgt.n	800032a <__adddf3+0x1ba>
 800030c:	f104 0414 	add.w	r4, r4, #20
 8000310:	f1c4 0220 	rsb	r2, r4, #32
 8000314:	fa20 f004 	lsr.w	r0, r0, r4
 8000318:	fa01 f302 	lsl.w	r3, r1, r2
 800031c:	ea40 0003 	orr.w	r0, r0, r3
 8000320:	fa21 f304 	lsr.w	r3, r1, r4
 8000324:	ea45 0103 	orr.w	r1, r5, r3
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	f1c4 040c 	rsb	r4, r4, #12
 800032e:	f1c4 0220 	rsb	r2, r4, #32
 8000332:	fa20 f002 	lsr.w	r0, r0, r2
 8000336:	fa01 f304 	lsl.w	r3, r1, r4
 800033a:	ea40 0003 	orr.w	r0, r0, r3
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	fa21 f004 	lsr.w	r0, r1, r4
 8000346:	4629      	mov	r1, r5
 8000348:	bd30      	pop	{r4, r5, pc}
 800034a:	f094 0f00 	teq	r4, #0
 800034e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000352:	bf06      	itte	eq
 8000354:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000358:	3401      	addeq	r4, #1
 800035a:	3d01      	subne	r5, #1
 800035c:	e74e      	b.n	80001fc <__adddf3+0x8c>
 800035e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000362:	bf18      	it	ne
 8000364:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000368:	d029      	beq.n	80003be <__adddf3+0x24e>
 800036a:	ea94 0f05 	teq	r4, r5
 800036e:	bf08      	it	eq
 8000370:	ea90 0f02 	teqeq	r0, r2
 8000374:	d005      	beq.n	8000382 <__adddf3+0x212>
 8000376:	ea54 0c00 	orrs.w	ip, r4, r0
 800037a:	bf04      	itt	eq
 800037c:	4619      	moveq	r1, r3
 800037e:	4610      	moveq	r0, r2
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	ea91 0f03 	teq	r1, r3
 8000386:	bf1e      	ittt	ne
 8000388:	2100      	movne	r1, #0
 800038a:	2000      	movne	r0, #0
 800038c:	bd30      	popne	{r4, r5, pc}
 800038e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000392:	d105      	bne.n	80003a0 <__adddf3+0x230>
 8000394:	0040      	lsls	r0, r0, #1
 8000396:	4149      	adcs	r1, r1
 8000398:	bf28      	it	cs
 800039a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a4:	bf3c      	itt	cc
 80003a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003aa:	bd30      	popcc	{r4, r5, pc}
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b8:	f04f 0000 	mov.w	r0, #0
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c2:	bf1a      	itte	ne
 80003c4:	4619      	movne	r1, r3
 80003c6:	4610      	movne	r0, r2
 80003c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003cc:	bf1c      	itt	ne
 80003ce:	460b      	movne	r3, r1
 80003d0:	4602      	movne	r2, r0
 80003d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d6:	bf06      	itte	eq
 80003d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003dc:	ea91 0f03 	teqeq	r1, r3
 80003e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	bf00      	nop

080003e8 <__aeabi_ui2d>:
 80003e8:	f090 0f00 	teq	r0, #0
 80003ec:	bf04      	itt	eq
 80003ee:	2100      	moveq	r1, #0
 80003f0:	4770      	bxeq	lr
 80003f2:	b530      	push	{r4, r5, lr}
 80003f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003fc:	f04f 0500 	mov.w	r5, #0
 8000400:	f04f 0100 	mov.w	r1, #0
 8000404:	e750      	b.n	80002a8 <__adddf3+0x138>
 8000406:	bf00      	nop

08000408 <__aeabi_i2d>:
 8000408:	f090 0f00 	teq	r0, #0
 800040c:	bf04      	itt	eq
 800040e:	2100      	moveq	r1, #0
 8000410:	4770      	bxeq	lr
 8000412:	b530      	push	{r4, r5, lr}
 8000414:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000418:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800041c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000420:	bf48      	it	mi
 8000422:	4240      	negmi	r0, r0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e73e      	b.n	80002a8 <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_f2d>:
 800042c:	0042      	lsls	r2, r0, #1
 800042e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000432:	ea4f 0131 	mov.w	r1, r1, rrx
 8000436:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800043a:	bf1f      	itttt	ne
 800043c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000440:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000444:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000448:	4770      	bxne	lr
 800044a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044e:	bf08      	it	eq
 8000450:	4770      	bxeq	lr
 8000452:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000456:	bf04      	itt	eq
 8000458:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000464:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000468:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800046c:	e71c      	b.n	80002a8 <__adddf3+0x138>
 800046e:	bf00      	nop

08000470 <__aeabi_ul2d>:
 8000470:	ea50 0201 	orrs.w	r2, r0, r1
 8000474:	bf08      	it	eq
 8000476:	4770      	bxeq	lr
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	f04f 0500 	mov.w	r5, #0
 800047e:	e00a      	b.n	8000496 <__aeabi_l2d+0x16>

08000480 <__aeabi_l2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048e:	d502      	bpl.n	8000496 <__aeabi_l2d+0x16>
 8000490:	4240      	negs	r0, r0
 8000492:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000496:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004a2:	f43f aed8 	beq.w	8000256 <__adddf3+0xe6>
 80004a6:	f04f 0203 	mov.w	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b6:	bf18      	it	ne
 80004b8:	3203      	addne	r2, #3
 80004ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004be:	f1c2 0320 	rsb	r3, r2, #32
 80004c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c6:	fa20 f002 	lsr.w	r0, r0, r2
 80004ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ce:	ea40 000e 	orr.w	r0, r0, lr
 80004d2:	fa21 f102 	lsr.w	r1, r1, r2
 80004d6:	4414      	add	r4, r2
 80004d8:	e6bd      	b.n	8000256 <__adddf3+0xe6>
 80004da:	bf00      	nop

080004dc <__aeabi_dmul>:
 80004dc:	b570      	push	{r4, r5, r6, lr}
 80004de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ea:	bf1d      	ittte	ne
 80004ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004f0:	ea94 0f0c 	teqne	r4, ip
 80004f4:	ea95 0f0c 	teqne	r5, ip
 80004f8:	f000 f8de 	bleq	80006b8 <__aeabi_dmul+0x1dc>
 80004fc:	442c      	add	r4, r5
 80004fe:	ea81 0603 	eor.w	r6, r1, r3
 8000502:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000506:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800050a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050e:	bf18      	it	ne
 8000510:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000514:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000518:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800051c:	d038      	beq.n	8000590 <__aeabi_dmul+0xb4>
 800051e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000522:	f04f 0500 	mov.w	r5, #0
 8000526:	fbe1 e502 	umlal	lr, r5, r1, r2
 800052a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000532:	f04f 0600 	mov.w	r6, #0
 8000536:	fbe1 5603 	umlal	r5, r6, r1, r3
 800053a:	f09c 0f00 	teq	ip, #0
 800053e:	bf18      	it	ne
 8000540:	f04e 0e01 	orrne.w	lr, lr, #1
 8000544:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000548:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800054c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000550:	d204      	bcs.n	800055c <__aeabi_dmul+0x80>
 8000552:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000556:	416d      	adcs	r5, r5
 8000558:	eb46 0606 	adc.w	r6, r6, r6
 800055c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000560:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000564:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000568:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800056c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000570:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000574:	bf88      	it	hi
 8000576:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800057a:	d81e      	bhi.n	80005ba <__aeabi_dmul+0xde>
 800057c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000580:	bf08      	it	eq
 8000582:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000586:	f150 0000 	adcs.w	r0, r0, #0
 800058a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058e:	bd70      	pop	{r4, r5, r6, pc}
 8000590:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000594:	ea46 0101 	orr.w	r1, r6, r1
 8000598:	ea40 0002 	orr.w	r0, r0, r2
 800059c:	ea81 0103 	eor.w	r1, r1, r3
 80005a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a4:	bfc2      	ittt	gt
 80005a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ae:	bd70      	popgt	{r4, r5, r6, pc}
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f04f 0e00 	mov.w	lr, #0
 80005b8:	3c01      	subs	r4, #1
 80005ba:	f300 80ab 	bgt.w	8000714 <__aeabi_dmul+0x238>
 80005be:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005c2:	bfde      	ittt	le
 80005c4:	2000      	movle	r0, #0
 80005c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd70      	pople	{r4, r5, r6, pc}
 80005cc:	f1c4 0400 	rsb	r4, r4, #0
 80005d0:	3c20      	subs	r4, #32
 80005d2:	da35      	bge.n	8000640 <__aeabi_dmul+0x164>
 80005d4:	340c      	adds	r4, #12
 80005d6:	dc1b      	bgt.n	8000610 <__aeabi_dmul+0x134>
 80005d8:	f104 0414 	add.w	r4, r4, #20
 80005dc:	f1c4 0520 	rsb	r5, r4, #32
 80005e0:	fa00 f305 	lsl.w	r3, r0, r5
 80005e4:	fa20 f004 	lsr.w	r0, r0, r4
 80005e8:	fa01 f205 	lsl.w	r2, r1, r5
 80005ec:	ea40 0002 	orr.w	r0, r0, r2
 80005f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005fc:	fa21 f604 	lsr.w	r6, r1, r4
 8000600:	eb42 0106 	adc.w	r1, r2, r6
 8000604:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000608:	bf08      	it	eq
 800060a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	f1c4 040c 	rsb	r4, r4, #12
 8000614:	f1c4 0520 	rsb	r5, r4, #32
 8000618:	fa00 f304 	lsl.w	r3, r0, r4
 800061c:	fa20 f005 	lsr.w	r0, r0, r5
 8000620:	fa01 f204 	lsl.w	r2, r1, r4
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800062c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000630:	f141 0100 	adc.w	r1, r1, #0
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f205 	lsl.w	r2, r0, r5
 8000648:	ea4e 0e02 	orr.w	lr, lr, r2
 800064c:	fa20 f304 	lsr.w	r3, r0, r4
 8000650:	fa01 f205 	lsl.w	r2, r1, r5
 8000654:	ea43 0302 	orr.w	r3, r3, r2
 8000658:	fa21 f004 	lsr.w	r0, r1, r4
 800065c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000660:	fa21 f204 	lsr.w	r2, r1, r4
 8000664:	ea20 0002 	bic.w	r0, r0, r2
 8000668:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800066c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000670:	bf08      	it	eq
 8000672:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f094 0f00 	teq	r4, #0
 800067c:	d10f      	bne.n	800069e <__aeabi_dmul+0x1c2>
 800067e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000682:	0040      	lsls	r0, r0, #1
 8000684:	eb41 0101 	adc.w	r1, r1, r1
 8000688:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800068c:	bf08      	it	eq
 800068e:	3c01      	subeq	r4, #1
 8000690:	d0f7      	beq.n	8000682 <__aeabi_dmul+0x1a6>
 8000692:	ea41 0106 	orr.w	r1, r1, r6
 8000696:	f095 0f00 	teq	r5, #0
 800069a:	bf18      	it	ne
 800069c:	4770      	bxne	lr
 800069e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006a2:	0052      	lsls	r2, r2, #1
 80006a4:	eb43 0303 	adc.w	r3, r3, r3
 80006a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006ac:	bf08      	it	eq
 80006ae:	3d01      	subeq	r5, #1
 80006b0:	d0f7      	beq.n	80006a2 <__aeabi_dmul+0x1c6>
 80006b2:	ea43 0306 	orr.w	r3, r3, r6
 80006b6:	4770      	bx	lr
 80006b8:	ea94 0f0c 	teq	r4, ip
 80006bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006c0:	bf18      	it	ne
 80006c2:	ea95 0f0c 	teqne	r5, ip
 80006c6:	d00c      	beq.n	80006e2 <__aeabi_dmul+0x206>
 80006c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006cc:	bf18      	it	ne
 80006ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d2:	d1d1      	bne.n	8000678 <__aeabi_dmul+0x19c>
 80006d4:	ea81 0103 	eor.w	r1, r1, r3
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	f04f 0000 	mov.w	r0, #0
 80006e0:	bd70      	pop	{r4, r5, r6, pc}
 80006e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e6:	bf06      	itte	eq
 80006e8:	4610      	moveq	r0, r2
 80006ea:	4619      	moveq	r1, r3
 80006ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f0:	d019      	beq.n	8000726 <__aeabi_dmul+0x24a>
 80006f2:	ea94 0f0c 	teq	r4, ip
 80006f6:	d102      	bne.n	80006fe <__aeabi_dmul+0x222>
 80006f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006fc:	d113      	bne.n	8000726 <__aeabi_dmul+0x24a>
 80006fe:	ea95 0f0c 	teq	r5, ip
 8000702:	d105      	bne.n	8000710 <__aeabi_dmul+0x234>
 8000704:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000708:	bf1c      	itt	ne
 800070a:	4610      	movne	r0, r2
 800070c:	4619      	movne	r1, r3
 800070e:	d10a      	bne.n	8000726 <__aeabi_dmul+0x24a>
 8000710:	ea81 0103 	eor.w	r1, r1, r3
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000720:	f04f 0000 	mov.w	r0, #0
 8000724:	bd70      	pop	{r4, r5, r6, pc}
 8000726:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072e:	bd70      	pop	{r4, r5, r6, pc}

08000730 <__aeabi_ddiv>:
 8000730:	b570      	push	{r4, r5, r6, lr}
 8000732:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000736:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800073a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073e:	bf1d      	ittte	ne
 8000740:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000744:	ea94 0f0c 	teqne	r4, ip
 8000748:	ea95 0f0c 	teqne	r5, ip
 800074c:	f000 f8a7 	bleq	800089e <__aeabi_ddiv+0x16e>
 8000750:	eba4 0405 	sub.w	r4, r4, r5
 8000754:	ea81 0e03 	eor.w	lr, r1, r3
 8000758:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800075c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000760:	f000 8088 	beq.w	8000874 <__aeabi_ddiv+0x144>
 8000764:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000768:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800076c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000770:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000774:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000778:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800077c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000780:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000784:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000788:	429d      	cmp	r5, r3
 800078a:	bf08      	it	eq
 800078c:	4296      	cmpeq	r6, r2
 800078e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000792:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000796:	d202      	bcs.n	800079e <__aeabi_ddiv+0x6e>
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	1ab6      	subs	r6, r6, r2
 80007a0:	eb65 0503 	sbc.w	r5, r5, r3
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800080c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000810:	d018      	beq.n	8000844 <__aeabi_ddiv+0x114>
 8000812:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000816:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800081a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000822:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000826:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800082a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082e:	d1c0      	bne.n	80007b2 <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	d10b      	bne.n	800084e <__aeabi_ddiv+0x11e>
 8000836:	ea41 0100 	orr.w	r1, r1, r0
 800083a:	f04f 0000 	mov.w	r0, #0
 800083e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000842:	e7b6      	b.n	80007b2 <__aeabi_ddiv+0x82>
 8000844:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000848:	bf04      	itt	eq
 800084a:	4301      	orreq	r1, r0
 800084c:	2000      	moveq	r0, #0
 800084e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000852:	bf88      	it	hi
 8000854:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000858:	f63f aeaf 	bhi.w	80005ba <__aeabi_dmul+0xde>
 800085c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000860:	bf04      	itt	eq
 8000862:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000866:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800086a:	f150 0000 	adcs.w	r0, r0, #0
 800086e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000872:	bd70      	pop	{r4, r5, r6, pc}
 8000874:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000878:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800087c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000880:	bfc2      	ittt	gt
 8000882:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000886:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800088a:	bd70      	popgt	{r4, r5, r6, pc}
 800088c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000890:	f04f 0e00 	mov.w	lr, #0
 8000894:	3c01      	subs	r4, #1
 8000896:	e690      	b.n	80005ba <__aeabi_dmul+0xde>
 8000898:	ea45 0e06 	orr.w	lr, r5, r6
 800089c:	e68d      	b.n	80005ba <__aeabi_dmul+0xde>
 800089e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008a2:	ea94 0f0c 	teq	r4, ip
 80008a6:	bf08      	it	eq
 80008a8:	ea95 0f0c 	teqeq	r5, ip
 80008ac:	f43f af3b 	beq.w	8000726 <__aeabi_dmul+0x24a>
 80008b0:	ea94 0f0c 	teq	r4, ip
 80008b4:	d10a      	bne.n	80008cc <__aeabi_ddiv+0x19c>
 80008b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ba:	f47f af34 	bne.w	8000726 <__aeabi_dmul+0x24a>
 80008be:	ea95 0f0c 	teq	r5, ip
 80008c2:	f47f af25 	bne.w	8000710 <__aeabi_dmul+0x234>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e72c      	b.n	8000726 <__aeabi_dmul+0x24a>
 80008cc:	ea95 0f0c 	teq	r5, ip
 80008d0:	d106      	bne.n	80008e0 <__aeabi_ddiv+0x1b0>
 80008d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d6:	f43f aefd 	beq.w	80006d4 <__aeabi_dmul+0x1f8>
 80008da:	4610      	mov	r0, r2
 80008dc:	4619      	mov	r1, r3
 80008de:	e722      	b.n	8000726 <__aeabi_dmul+0x24a>
 80008e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e4:	bf18      	it	ne
 80008e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ea:	f47f aec5 	bne.w	8000678 <__aeabi_dmul+0x19c>
 80008ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008f2:	f47f af0d 	bne.w	8000710 <__aeabi_dmul+0x234>
 80008f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008fa:	f47f aeeb 	bne.w	80006d4 <__aeabi_dmul+0x1f8>
 80008fe:	e712      	b.n	8000726 <__aeabi_dmul+0x24a>

08000900 <__aeabi_d2f>:
 8000900:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000904:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000908:	bf24      	itt	cs
 800090a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800090e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000912:	d90d      	bls.n	8000930 <__aeabi_d2f+0x30>
 8000914:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000918:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800091c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000920:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000924:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000928:	bf08      	it	eq
 800092a:	f020 0001 	biceq.w	r0, r0, #1
 800092e:	4770      	bx	lr
 8000930:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000934:	d121      	bne.n	800097a <__aeabi_d2f+0x7a>
 8000936:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800093a:	bfbc      	itt	lt
 800093c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000940:	4770      	bxlt	lr
 8000942:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000946:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800094a:	f1c2 0218 	rsb	r2, r2, #24
 800094e:	f1c2 0c20 	rsb	ip, r2, #32
 8000952:	fa10 f30c 	lsls.w	r3, r0, ip
 8000956:	fa20 f002 	lsr.w	r0, r0, r2
 800095a:	bf18      	it	ne
 800095c:	f040 0001 	orrne.w	r0, r0, #1
 8000960:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000964:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000968:	fa03 fc0c 	lsl.w	ip, r3, ip
 800096c:	ea40 000c 	orr.w	r0, r0, ip
 8000970:	fa23 f302 	lsr.w	r3, r3, r2
 8000974:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000978:	e7cc      	b.n	8000914 <__aeabi_d2f+0x14>
 800097a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800097e:	d107      	bne.n	8000990 <__aeabi_d2f+0x90>
 8000980:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000984:	bf1e      	ittt	ne
 8000986:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800098a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800098e:	4770      	bxne	lr
 8000990:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000994:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000998:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop

080009a0 <__aeabi_frsub>:
 80009a0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009a4:	e002      	b.n	80009ac <__addsf3>
 80009a6:	bf00      	nop

080009a8 <__aeabi_fsub>:
 80009a8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009ac <__addsf3>:
 80009ac:	0042      	lsls	r2, r0, #1
 80009ae:	bf1f      	itttt	ne
 80009b0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009b4:	ea92 0f03 	teqne	r2, r3
 80009b8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009bc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009c0:	d06a      	beq.n	8000a98 <__addsf3+0xec>
 80009c2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009c6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009ca:	bfc1      	itttt	gt
 80009cc:	18d2      	addgt	r2, r2, r3
 80009ce:	4041      	eorgt	r1, r0
 80009d0:	4048      	eorgt	r0, r1
 80009d2:	4041      	eorgt	r1, r0
 80009d4:	bfb8      	it	lt
 80009d6:	425b      	neglt	r3, r3
 80009d8:	2b19      	cmp	r3, #25
 80009da:	bf88      	it	hi
 80009dc:	4770      	bxhi	lr
 80009de:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009e2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009e6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009ea:	bf18      	it	ne
 80009ec:	4240      	negne	r0, r0
 80009ee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009f2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009f6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009fa:	bf18      	it	ne
 80009fc:	4249      	negne	r1, r1
 80009fe:	ea92 0f03 	teq	r2, r3
 8000a02:	d03f      	beq.n	8000a84 <__addsf3+0xd8>
 8000a04:	f1a2 0201 	sub.w	r2, r2, #1
 8000a08:	fa41 fc03 	asr.w	ip, r1, r3
 8000a0c:	eb10 000c 	adds.w	r0, r0, ip
 8000a10:	f1c3 0320 	rsb	r3, r3, #32
 8000a14:	fa01 f103 	lsl.w	r1, r1, r3
 8000a18:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a1c:	d502      	bpl.n	8000a24 <__addsf3+0x78>
 8000a1e:	4249      	negs	r1, r1
 8000a20:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a24:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a28:	d313      	bcc.n	8000a52 <__addsf3+0xa6>
 8000a2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a2e:	d306      	bcc.n	8000a3e <__addsf3+0x92>
 8000a30:	0840      	lsrs	r0, r0, #1
 8000a32:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a36:	f102 0201 	add.w	r2, r2, #1
 8000a3a:	2afe      	cmp	r2, #254	; 0xfe
 8000a3c:	d251      	bcs.n	8000ae2 <__addsf3+0x136>
 8000a3e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a46:	bf08      	it	eq
 8000a48:	f020 0001 	biceq.w	r0, r0, #1
 8000a4c:	ea40 0003 	orr.w	r0, r0, r3
 8000a50:	4770      	bx	lr
 8000a52:	0049      	lsls	r1, r1, #1
 8000a54:	eb40 0000 	adc.w	r0, r0, r0
 8000a58:	3a01      	subs	r2, #1
 8000a5a:	bf28      	it	cs
 8000a5c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a60:	d2ed      	bcs.n	8000a3e <__addsf3+0x92>
 8000a62:	fab0 fc80 	clz	ip, r0
 8000a66:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a6a:	ebb2 020c 	subs.w	r2, r2, ip
 8000a6e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a72:	bfaa      	itet	ge
 8000a74:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a78:	4252      	neglt	r2, r2
 8000a7a:	4318      	orrge	r0, r3
 8000a7c:	bfbc      	itt	lt
 8000a7e:	40d0      	lsrlt	r0, r2
 8000a80:	4318      	orrlt	r0, r3
 8000a82:	4770      	bx	lr
 8000a84:	f092 0f00 	teq	r2, #0
 8000a88:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a8c:	bf06      	itte	eq
 8000a8e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a92:	3201      	addeq	r2, #1
 8000a94:	3b01      	subne	r3, #1
 8000a96:	e7b5      	b.n	8000a04 <__addsf3+0x58>
 8000a98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa6:	d021      	beq.n	8000aec <__addsf3+0x140>
 8000aa8:	ea92 0f03 	teq	r2, r3
 8000aac:	d004      	beq.n	8000ab8 <__addsf3+0x10c>
 8000aae:	f092 0f00 	teq	r2, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	4608      	moveq	r0, r1
 8000ab6:	4770      	bx	lr
 8000ab8:	ea90 0f01 	teq	r0, r1
 8000abc:	bf1c      	itt	ne
 8000abe:	2000      	movne	r0, #0
 8000ac0:	4770      	bxne	lr
 8000ac2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ac6:	d104      	bne.n	8000ad2 <__addsf3+0x126>
 8000ac8:	0040      	lsls	r0, r0, #1
 8000aca:	bf28      	it	cs
 8000acc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ad0:	4770      	bx	lr
 8000ad2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ad6:	bf3c      	itt	cc
 8000ad8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000adc:	4770      	bxcc	lr
 8000ade:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ae2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ae6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aea:	4770      	bx	lr
 8000aec:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000af0:	bf16      	itet	ne
 8000af2:	4608      	movne	r0, r1
 8000af4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000af8:	4601      	movne	r1, r0
 8000afa:	0242      	lsls	r2, r0, #9
 8000afc:	bf06      	itte	eq
 8000afe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b02:	ea90 0f01 	teqeq	r0, r1
 8000b06:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b0a:	4770      	bx	lr

08000b0c <__aeabi_ui2f>:
 8000b0c:	f04f 0300 	mov.w	r3, #0
 8000b10:	e004      	b.n	8000b1c <__aeabi_i2f+0x8>
 8000b12:	bf00      	nop

08000b14 <__aeabi_i2f>:
 8000b14:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b18:	bf48      	it	mi
 8000b1a:	4240      	negmi	r0, r0
 8000b1c:	ea5f 0c00 	movs.w	ip, r0
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b28:	4601      	mov	r1, r0
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	e01c      	b.n	8000b6a <__aeabi_l2f+0x2a>

08000b30 <__aeabi_ul2f>:
 8000b30:	ea50 0201 	orrs.w	r2, r0, r1
 8000b34:	bf08      	it	eq
 8000b36:	4770      	bxeq	lr
 8000b38:	f04f 0300 	mov.w	r3, #0
 8000b3c:	e00a      	b.n	8000b54 <__aeabi_l2f+0x14>
 8000b3e:	bf00      	nop

08000b40 <__aeabi_l2f>:
 8000b40:	ea50 0201 	orrs.w	r2, r0, r1
 8000b44:	bf08      	it	eq
 8000b46:	4770      	bxeq	lr
 8000b48:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b4c:	d502      	bpl.n	8000b54 <__aeabi_l2f+0x14>
 8000b4e:	4240      	negs	r0, r0
 8000b50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b54:	ea5f 0c01 	movs.w	ip, r1
 8000b58:	bf02      	ittt	eq
 8000b5a:	4684      	moveq	ip, r0
 8000b5c:	4601      	moveq	r1, r0
 8000b5e:	2000      	moveq	r0, #0
 8000b60:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b64:	bf08      	it	eq
 8000b66:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b6a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b6e:	fabc f28c 	clz	r2, ip
 8000b72:	3a08      	subs	r2, #8
 8000b74:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b78:	db10      	blt.n	8000b9c <__aeabi_l2f+0x5c>
 8000b7a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b7e:	4463      	add	r3, ip
 8000b80:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b84:	f1c2 0220 	rsb	r2, r2, #32
 8000b88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000b90:	eb43 0002 	adc.w	r0, r3, r2
 8000b94:	bf08      	it	eq
 8000b96:	f020 0001 	biceq.w	r0, r0, #1
 8000b9a:	4770      	bx	lr
 8000b9c:	f102 0220 	add.w	r2, r2, #32
 8000ba0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ba4:	f1c2 0220 	rsb	r2, r2, #32
 8000ba8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bac:	fa21 f202 	lsr.w	r2, r1, r2
 8000bb0:	eb43 0002 	adc.w	r0, r3, r2
 8000bb4:	bf08      	it	eq
 8000bb6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bba:	4770      	bx	lr

08000bbc <__gesf2>:
 8000bbc:	f04f 3cff 	mov.w	ip, #4294967295
 8000bc0:	e006      	b.n	8000bd0 <__cmpsf2+0x4>
 8000bc2:	bf00      	nop

08000bc4 <__lesf2>:
 8000bc4:	f04f 0c01 	mov.w	ip, #1
 8000bc8:	e002      	b.n	8000bd0 <__cmpsf2+0x4>
 8000bca:	bf00      	nop

08000bcc <__cmpsf2>:
 8000bcc:	f04f 0c01 	mov.w	ip, #1
 8000bd0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000bd4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000bd8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bdc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000be0:	bf18      	it	ne
 8000be2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000be6:	d011      	beq.n	8000c0c <__cmpsf2+0x40>
 8000be8:	b001      	add	sp, #4
 8000bea:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000bee:	bf18      	it	ne
 8000bf0:	ea90 0f01 	teqne	r0, r1
 8000bf4:	bf58      	it	pl
 8000bf6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000bfa:	bf88      	it	hi
 8000bfc:	17c8      	asrhi	r0, r1, #31
 8000bfe:	bf38      	it	cc
 8000c00:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000c04:	bf18      	it	ne
 8000c06:	f040 0001 	orrne.w	r0, r0, #1
 8000c0a:	4770      	bx	lr
 8000c0c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c10:	d102      	bne.n	8000c18 <__cmpsf2+0x4c>
 8000c12:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c16:	d105      	bne.n	8000c24 <__cmpsf2+0x58>
 8000c18:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c1c:	d1e4      	bne.n	8000be8 <__cmpsf2+0x1c>
 8000c1e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c22:	d0e1      	beq.n	8000be8 <__cmpsf2+0x1c>
 8000c24:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <__aeabi_cfrcmple>:
 8000c2c:	4684      	mov	ip, r0
 8000c2e:	4608      	mov	r0, r1
 8000c30:	4661      	mov	r1, ip
 8000c32:	e7ff      	b.n	8000c34 <__aeabi_cfcmpeq>

08000c34 <__aeabi_cfcmpeq>:
 8000c34:	b50f      	push	{r0, r1, r2, r3, lr}
 8000c36:	f7ff ffc9 	bl	8000bcc <__cmpsf2>
 8000c3a:	2800      	cmp	r0, #0
 8000c3c:	bf48      	it	mi
 8000c3e:	f110 0f00 	cmnmi.w	r0, #0
 8000c42:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000c44 <__aeabi_fcmpeq>:
 8000c44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c48:	f7ff fff4 	bl	8000c34 <__aeabi_cfcmpeq>
 8000c4c:	bf0c      	ite	eq
 8000c4e:	2001      	moveq	r0, #1
 8000c50:	2000      	movne	r0, #0
 8000c52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c56:	bf00      	nop

08000c58 <__aeabi_fcmplt>:
 8000c58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c5c:	f7ff ffea 	bl	8000c34 <__aeabi_cfcmpeq>
 8000c60:	bf34      	ite	cc
 8000c62:	2001      	movcc	r0, #1
 8000c64:	2000      	movcs	r0, #0
 8000c66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c6a:	bf00      	nop

08000c6c <__aeabi_fcmple>:
 8000c6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c70:	f7ff ffe0 	bl	8000c34 <__aeabi_cfcmpeq>
 8000c74:	bf94      	ite	ls
 8000c76:	2001      	movls	r0, #1
 8000c78:	2000      	movhi	r0, #0
 8000c7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c7e:	bf00      	nop

08000c80 <__aeabi_fcmpge>:
 8000c80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c84:	f7ff ffd2 	bl	8000c2c <__aeabi_cfrcmple>
 8000c88:	bf94      	ite	ls
 8000c8a:	2001      	movls	r0, #1
 8000c8c:	2000      	movhi	r0, #0
 8000c8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c92:	bf00      	nop

08000c94 <__aeabi_fcmpgt>:
 8000c94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c98:	f7ff ffc8 	bl	8000c2c <__aeabi_cfrcmple>
 8000c9c:	bf34      	ite	cc
 8000c9e:	2001      	movcc	r0, #1
 8000ca0:	2000      	movcs	r0, #0
 8000ca2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ca6:	bf00      	nop

08000ca8 <main>:
  * @retval int
  */
unsigned char string[]=" Hi Embedded ICON ";
unsigned char string1[20];
int main(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cae:	f000 fb05 	bl	80012bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb2:	f000 f8f7 	bl	8000ea4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb6:	f000 f9cb 	bl	8001050 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000cba:	f000 f99f 	bl	8000ffc <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000cbe:	f000 f941 	bl	8000f44 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	2108      	movs	r1, #8
 8000cc6:	486e      	ldr	r0, [pc, #440]	; (8000e80 <main+0x1d8>)
 8000cc8:	f001 fa12 	bl	80020f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000ccc:	2201      	movs	r2, #1
 8000cce:	2110      	movs	r1, #16
 8000cd0:	486b      	ldr	r0, [pc, #428]	; (8000e80 <main+0x1d8>)
 8000cd2:	f001 fa0d 	bl	80020f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	2120      	movs	r1, #32
 8000cda:	4869      	ldr	r0, [pc, #420]	; (8000e80 <main+0x1d8>)
 8000cdc:	f001 fa08 	bl	80020f0 <HAL_GPIO_WritePin>
  HAL_UART_Transmit(&huart1, string, 20, 0x500);
 8000ce0:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000ce4:	2214      	movs	r2, #20
 8000ce6:	4967      	ldr	r1, [pc, #412]	; (8000e84 <main+0x1dc>)
 8000ce8:	4867      	ldr	r0, [pc, #412]	; (8000e88 <main+0x1e0>)
 8000cea:	f001 ffe5 	bl	8002cb8 <HAL_UART_Transmit>
  float mv,mv2,mv3;
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 8000cee:	4867      	ldr	r0, [pc, #412]	; (8000e8c <main+0x1e4>)
 8000cf0:	f000 fc1e 	bl	8001530 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000cf4:	2164      	movs	r1, #100	; 0x64
 8000cf6:	4865      	ldr	r0, [pc, #404]	; (8000e8c <main+0x1e4>)
 8000cf8:	f000 fcf4 	bl	80016e4 <HAL_ADC_PollForConversion>
	  adcResult1 = HAL_ADC_GetValue(&hadc1);
 8000cfc:	4863      	ldr	r0, [pc, #396]	; (8000e8c <main+0x1e4>)
 8000cfe:	f000 fdf7 	bl	80018f0 <HAL_ADC_GetValue>
 8000d02:	6178      	str	r0, [r7, #20]
	  mv = ((float)adcResult1) * 10.0 / 4095.0;
 8000d04:	6978      	ldr	r0, [r7, #20]
 8000d06:	f7ff ff01 	bl	8000b0c <__aeabi_ui2f>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fb8d 	bl	800042c <__aeabi_f2d>
 8000d12:	f04f 0200 	mov.w	r2, #0
 8000d16:	4b5e      	ldr	r3, [pc, #376]	; (8000e90 <main+0x1e8>)
 8000d18:	f7ff fbe0 	bl	80004dc <__aeabi_dmul>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	460b      	mov	r3, r1
 8000d20:	4610      	mov	r0, r2
 8000d22:	4619      	mov	r1, r3
 8000d24:	a354      	add	r3, pc, #336	; (adr r3, 8000e78 <main+0x1d0>)
 8000d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d2a:	f7ff fd01 	bl	8000730 <__aeabi_ddiv>
 8000d2e:	4602      	mov	r2, r0
 8000d30:	460b      	mov	r3, r1
 8000d32:	4610      	mov	r0, r2
 8000d34:	4619      	mov	r1, r3
 8000d36:	f7ff fde3 	bl	8000900 <__aeabi_d2f>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	613b      	str	r3, [r7, #16]


	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000d3e:	2164      	movs	r1, #100	; 0x64
 8000d40:	4852      	ldr	r0, [pc, #328]	; (8000e8c <main+0x1e4>)
 8000d42:	f000 fccf 	bl	80016e4 <HAL_ADC_PollForConversion>
	  adcResult2 = HAL_ADC_GetValue(&hadc1);
 8000d46:	4851      	ldr	r0, [pc, #324]	; (8000e8c <main+0x1e4>)
 8000d48:	f000 fdd2 	bl	80018f0 <HAL_ADC_GetValue>
 8000d4c:	60f8      	str	r0, [r7, #12]
	  mv2 = ((float)adcResult2) * 10.0 / 4095.0;
 8000d4e:	68f8      	ldr	r0, [r7, #12]
 8000d50:	f7ff fedc 	bl	8000b0c <__aeabi_ui2f>
 8000d54:	4603      	mov	r3, r0
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff fb68 	bl	800042c <__aeabi_f2d>
 8000d5c:	f04f 0200 	mov.w	r2, #0
 8000d60:	4b4b      	ldr	r3, [pc, #300]	; (8000e90 <main+0x1e8>)
 8000d62:	f7ff fbbb 	bl	80004dc <__aeabi_dmul>
 8000d66:	4602      	mov	r2, r0
 8000d68:	460b      	mov	r3, r1
 8000d6a:	4610      	mov	r0, r2
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	a342      	add	r3, pc, #264	; (adr r3, 8000e78 <main+0x1d0>)
 8000d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d74:	f7ff fcdc 	bl	8000730 <__aeabi_ddiv>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4610      	mov	r0, r2
 8000d7e:	4619      	mov	r1, r3
 8000d80:	f7ff fdbe 	bl	8000900 <__aeabi_d2f>
 8000d84:	4603      	mov	r3, r0
 8000d86:	60bb      	str	r3, [r7, #8]

	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000d88:	2164      	movs	r1, #100	; 0x64
 8000d8a:	4840      	ldr	r0, [pc, #256]	; (8000e8c <main+0x1e4>)
 8000d8c:	f000 fcaa 	bl	80016e4 <HAL_ADC_PollForConversion>
	  adcResult3 = HAL_ADC_GetValue(&hadc1);
 8000d90:	483e      	ldr	r0, [pc, #248]	; (8000e8c <main+0x1e4>)
 8000d92:	f000 fdad 	bl	80018f0 <HAL_ADC_GetValue>
 8000d96:	6078      	str	r0, [r7, #4]
	  mv3 = ((float)adcResult3) * 10.0 / 4095.0;
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f7ff feb7 	bl	8000b0c <__aeabi_ui2f>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fb43 	bl	800042c <__aeabi_f2d>
 8000da6:	f04f 0200 	mov.w	r2, #0
 8000daa:	4b39      	ldr	r3, [pc, #228]	; (8000e90 <main+0x1e8>)
 8000dac:	f7ff fb96 	bl	80004dc <__aeabi_dmul>
 8000db0:	4602      	mov	r2, r0
 8000db2:	460b      	mov	r3, r1
 8000db4:	4610      	mov	r0, r2
 8000db6:	4619      	mov	r1, r3
 8000db8:	a32f      	add	r3, pc, #188	; (adr r3, 8000e78 <main+0x1d0>)
 8000dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dbe:	f7ff fcb7 	bl	8000730 <__aeabi_ddiv>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	4610      	mov	r0, r2
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f7ff fd99 	bl	8000900 <__aeabi_d2f>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	603b      	str	r3, [r7, #0]
	  HAL_ADC_Stop(&hadc1);
 8000dd2:	482e      	ldr	r0, [pc, #184]	; (8000e8c <main+0x1e4>)
 8000dd4:	f000 fc5a 	bl	800168c <HAL_ADC_Stop>

    /* USER CODE END WHILE */
	  HAL_UART_Receive(&huart1, string1, 1, 0x5000);
 8000dd8:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000ddc:	2201      	movs	r2, #1
 8000dde:	492d      	ldr	r1, [pc, #180]	; (8000e94 <main+0x1ec>)
 8000de0:	4829      	ldr	r0, [pc, #164]	; (8000e88 <main+0x1e0>)
 8000de2:	f001 ffec 	bl	8002dbe <HAL_UART_Receive>
	  HAL_UART_Transmit(&huart1, string1, 5, 0x500);
 8000de6:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000dea:	2205      	movs	r2, #5
 8000dec:	4929      	ldr	r1, [pc, #164]	; (8000e94 <main+0x1ec>)
 8000dee:	4826      	ldr	r0, [pc, #152]	; (8000e88 <main+0x1e0>)
 8000df0:	f001 ff62 	bl	8002cb8 <HAL_UART_Transmit>

	  //Bolst biljke
	  if(strcmp((char *)string1,"F")== 0){
 8000df4:	4928      	ldr	r1, [pc, #160]	; (8000e98 <main+0x1f0>)
 8000df6:	4827      	ldr	r0, [pc, #156]	; (8000e94 <main+0x1ec>)
 8000df8:	f7ff f9aa 	bl	8000150 <strcmp>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d105      	bne.n	8000e0e <main+0x166>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000e02:	2201      	movs	r2, #1
 8000e04:	2108      	movs	r1, #8
 8000e06:	481e      	ldr	r0, [pc, #120]	; (8000e80 <main+0x1d8>)
 8000e08:	f001 f972 	bl	80020f0 <HAL_GPIO_WritePin>
 8000e0c:	e004      	b.n	8000e18 <main+0x170>
	  }
	  else{
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2108      	movs	r1, #8
 8000e12:	481b      	ldr	r0, [pc, #108]	; (8000e80 <main+0x1d8>)
 8000e14:	f001 f96c 	bl	80020f0 <HAL_GPIO_WritePin>
	  }

	  //Otvaranje vrata
	  if(mv > 9.0 || mv2 < 5.0){
 8000e18:	4920      	ldr	r1, [pc, #128]	; (8000e9c <main+0x1f4>)
 8000e1a:	6938      	ldr	r0, [r7, #16]
 8000e1c:	f7ff ff3a 	bl	8000c94 <__aeabi_fcmpgt>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d106      	bne.n	8000e34 <main+0x18c>
 8000e26:	491e      	ldr	r1, [pc, #120]	; (8000ea0 <main+0x1f8>)
 8000e28:	68b8      	ldr	r0, [r7, #8]
 8000e2a:	f7ff ff15 	bl	8000c58 <__aeabi_fcmplt>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d005      	beq.n	8000e40 <main+0x198>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000e34:	2201      	movs	r2, #1
 8000e36:	2120      	movs	r1, #32
 8000e38:	4811      	ldr	r0, [pc, #68]	; (8000e80 <main+0x1d8>)
 8000e3a:	f001 f959 	bl	80020f0 <HAL_GPIO_WritePin>
 8000e3e:	e004      	b.n	8000e4a <main+0x1a2>
	  }
	  else{
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2120      	movs	r1, #32
 8000e44:	480e      	ldr	r0, [pc, #56]	; (8000e80 <main+0x1d8>)
 8000e46:	f001 f953 	bl	80020f0 <HAL_GPIO_WritePin>
	  }

	  //Navodnjavanje
	  if(mv3 > 2.0){
 8000e4a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000e4e:	6838      	ldr	r0, [r7, #0]
 8000e50:	f7ff ff20 	bl	8000c94 <__aeabi_fcmpgt>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d005      	beq.n	8000e66 <main+0x1be>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	2110      	movs	r1, #16
 8000e5e:	4808      	ldr	r0, [pc, #32]	; (8000e80 <main+0x1d8>)
 8000e60:	f001 f946 	bl	80020f0 <HAL_GPIO_WritePin>
 8000e64:	e743      	b.n	8000cee <main+0x46>
	  }
	  else{
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2110      	movs	r1, #16
 8000e6a:	4805      	ldr	r0, [pc, #20]	; (8000e80 <main+0x1d8>)
 8000e6c:	f001 f940 	bl	80020f0 <HAL_GPIO_WritePin>
	  HAL_ADC_Start(&hadc1);
 8000e70:	e73d      	b.n	8000cee <main+0x46>
 8000e72:	bf00      	nop
 8000e74:	f3af 8000 	nop.w
 8000e78:	00000000 	.word	0x00000000
 8000e7c:	40affe00 	.word	0x40affe00
 8000e80:	40010800 	.word	0x40010800
 8000e84:	20000000 	.word	0x20000000
 8000e88:	2000006c 	.word	0x2000006c
 8000e8c:	2000003c 	.word	0x2000003c
 8000e90:	40240000 	.word	0x40240000
 8000e94:	200000b4 	.word	0x200000b4
 8000e98:	0800314c 	.word	0x0800314c
 8000e9c:	41100000 	.word	0x41100000
 8000ea0:	40a00000 	.word	0x40a00000

08000ea4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b094      	sub	sp, #80	; 0x50
 8000ea8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eae:	2228      	movs	r2, #40	; 0x28
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f002 f936 	bl	8003124 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000edc:	2310      	movs	r3, #16
 8000ede:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f001 f919 	bl	8002120 <HAL_RCC_OscConfig>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000ef4:	f000 f8de 	bl	80010b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef8:	230f      	movs	r3, #15
 8000efa:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000efc:	2300      	movs	r3, #0
 8000efe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f00:	2300      	movs	r3, #0
 8000f02:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f04:	2300      	movs	r3, #0
 8000f06:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	2100      	movs	r1, #0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f001 fb86 	bl	8002624 <HAL_RCC_ClockConfig>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000f1e:	f000 f8c9 	bl	80010b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f22:	2302      	movs	r3, #2
 8000f24:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f001 fd07 	bl	8002940 <HAL_RCCEx_PeriphCLKConfig>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000f38:	f000 f8bc 	bl	80010b4 <Error_Handler>
  }
}
 8000f3c:	bf00      	nop
 8000f3e:	3750      	adds	r7, #80	; 0x50
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f54:	4b27      	ldr	r3, [pc, #156]	; (8000ff4 <MX_ADC1_Init+0xb0>)
 8000f56:	4a28      	ldr	r2, [pc, #160]	; (8000ff8 <MX_ADC1_Init+0xb4>)
 8000f58:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f5a:	4b26      	ldr	r3, [pc, #152]	; (8000ff4 <MX_ADC1_Init+0xb0>)
 8000f5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f60:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f62:	4b24      	ldr	r3, [pc, #144]	; (8000ff4 <MX_ADC1_Init+0xb0>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f68:	4b22      	ldr	r3, [pc, #136]	; (8000ff4 <MX_ADC1_Init+0xb0>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f6e:	4b21      	ldr	r3, [pc, #132]	; (8000ff4 <MX_ADC1_Init+0xb0>)
 8000f70:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000f74:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f76:	4b1f      	ldr	r3, [pc, #124]	; (8000ff4 <MX_ADC1_Init+0xb0>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000f7c:	4b1d      	ldr	r3, [pc, #116]	; (8000ff4 <MX_ADC1_Init+0xb0>)
 8000f7e:	2203      	movs	r2, #3
 8000f80:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f82:	481c      	ldr	r0, [pc, #112]	; (8000ff4 <MX_ADC1_Init+0xb0>)
 8000f84:	f000 f9fc 	bl	8001380 <HAL_ADC_Init>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000f8e:	f000 f891 	bl	80010b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f96:	2301      	movs	r3, #1
 8000f98:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000f9a:	2307      	movs	r3, #7
 8000f9c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4814      	ldr	r0, [pc, #80]	; (8000ff4 <MX_ADC1_Init+0xb0>)
 8000fa4:	f000 fcb0 	bl	8001908 <HAL_ADC_ConfigChannel>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000fae:	f000 f881 	bl	80010b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	480d      	ldr	r0, [pc, #52]	; (8000ff4 <MX_ADC1_Init+0xb0>)
 8000fc0:	f000 fca2 	bl	8001908 <HAL_ADC_ConfigChannel>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000fca:	f000 f873 	bl	80010b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4806      	ldr	r0, [pc, #24]	; (8000ff4 <MX_ADC1_Init+0xb0>)
 8000fdc:	f000 fc94 	bl	8001908 <HAL_ADC_ConfigChannel>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000fe6:	f000 f865 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fea:	bf00      	nop
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	2000003c 	.word	0x2000003c
 8000ff8:	40012400 	.word	0x40012400

08000ffc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <MX_USART1_UART_Init+0x4c>)
 8001002:	4a12      	ldr	r2, [pc, #72]	; (800104c <MX_USART1_UART_Init+0x50>)
 8001004:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001006:	4b10      	ldr	r3, [pc, #64]	; (8001048 <MX_USART1_UART_Init+0x4c>)
 8001008:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800100c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800100e:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <MX_USART1_UART_Init+0x4c>)
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001014:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <MX_USART1_UART_Init+0x4c>)
 8001016:	2200      	movs	r2, #0
 8001018:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800101a:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <MX_USART1_UART_Init+0x4c>)
 800101c:	2200      	movs	r2, #0
 800101e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001020:	4b09      	ldr	r3, [pc, #36]	; (8001048 <MX_USART1_UART_Init+0x4c>)
 8001022:	220c      	movs	r2, #12
 8001024:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001026:	4b08      	ldr	r3, [pc, #32]	; (8001048 <MX_USART1_UART_Init+0x4c>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <MX_USART1_UART_Init+0x4c>)
 800102e:	2200      	movs	r2, #0
 8001030:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <MX_USART1_UART_Init+0x4c>)
 8001034:	f001 fdf0 	bl	8002c18 <HAL_UART_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800103e:	f000 f839 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	2000006c 	.word	0x2000006c
 800104c:	40013800 	.word	0x40013800

08001050 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001056:	f107 0308 	add.w	r3, r7, #8
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001064:	4b11      	ldr	r3, [pc, #68]	; (80010ac <MX_GPIO_Init+0x5c>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	4a10      	ldr	r2, [pc, #64]	; (80010ac <MX_GPIO_Init+0x5c>)
 800106a:	f043 0304 	orr.w	r3, r3, #4
 800106e:	6193      	str	r3, [r2, #24]
 8001070:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <MX_GPIO_Init+0x5c>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	f003 0304 	and.w	r3, r3, #4
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	2138      	movs	r1, #56	; 0x38
 8001080:	480b      	ldr	r0, [pc, #44]	; (80010b0 <MX_GPIO_Init+0x60>)
 8001082:	f001 f835 	bl	80020f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001086:	2338      	movs	r3, #56	; 0x38
 8001088:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108a:	2301      	movs	r3, #1
 800108c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2302      	movs	r3, #2
 8001094:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001096:	f107 0308 	add.w	r3, r7, #8
 800109a:	4619      	mov	r1, r3
 800109c:	4804      	ldr	r0, [pc, #16]	; (80010b0 <MX_GPIO_Init+0x60>)
 800109e:	f000 feab 	bl	8001df8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010a2:	bf00      	nop
 80010a4:	3718      	adds	r7, #24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40021000 	.word	0x40021000
 80010b0:	40010800 	.word	0x40010800

080010b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b8:	b672      	cpsid	i
}
 80010ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010bc:	e7fe      	b.n	80010bc <Error_Handler+0x8>
	...

080010c0 <HAL_MspInit>:
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <HAL_MspInit+0x40>)
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	4a0d      	ldr	r2, [pc, #52]	; (8001100 <HAL_MspInit+0x40>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6193      	str	r3, [r2, #24]
 80010d2:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <HAL_MspInit+0x40>)
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4b08      	ldr	r3, [pc, #32]	; (8001100 <HAL_MspInit+0x40>)
 80010e0:	69db      	ldr	r3, [r3, #28]
 80010e2:	4a07      	ldr	r2, [pc, #28]	; (8001100 <HAL_MspInit+0x40>)
 80010e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e8:	61d3      	str	r3, [r2, #28]
 80010ea:	4b05      	ldr	r3, [pc, #20]	; (8001100 <HAL_MspInit+0x40>)
 80010ec:	69db      	ldr	r3, [r3, #28]
 80010ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f2:	603b      	str	r3, [r7, #0]
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr
 8001100:	40021000 	.word	0x40021000

08001104 <HAL_ADC_MspInit>:
 8001104:	b580      	push	{r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	f107 0310 	add.w	r3, r7, #16
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a14      	ldr	r2, [pc, #80]	; (8001170 <HAL_ADC_MspInit+0x6c>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d121      	bne.n	8001168 <HAL_ADC_MspInit+0x64>
 8001124:	4b13      	ldr	r3, [pc, #76]	; (8001174 <HAL_ADC_MspInit+0x70>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	4a12      	ldr	r2, [pc, #72]	; (8001174 <HAL_ADC_MspInit+0x70>)
 800112a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800112e:	6193      	str	r3, [r2, #24]
 8001130:	4b10      	ldr	r3, [pc, #64]	; (8001174 <HAL_ADC_MspInit+0x70>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <HAL_ADC_MspInit+0x70>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	4a0c      	ldr	r2, [pc, #48]	; (8001174 <HAL_ADC_MspInit+0x70>)
 8001142:	f043 0304 	orr.w	r3, r3, #4
 8001146:	6193      	str	r3, [r2, #24]
 8001148:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <HAL_ADC_MspInit+0x70>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	f003 0304 	and.w	r3, r3, #4
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	2307      	movs	r3, #7
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	2303      	movs	r3, #3
 800115a:	617b      	str	r3, [r7, #20]
 800115c:	f107 0310 	add.w	r3, r7, #16
 8001160:	4619      	mov	r1, r3
 8001162:	4805      	ldr	r0, [pc, #20]	; (8001178 <HAL_ADC_MspInit+0x74>)
 8001164:	f000 fe48 	bl	8001df8 <HAL_GPIO_Init>
 8001168:	bf00      	nop
 800116a:	3720      	adds	r7, #32
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40012400 	.word	0x40012400
 8001174:	40021000 	.word	0x40021000
 8001178:	40010800 	.word	0x40010800

0800117c <HAL_UART_MspInit>:
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	f107 0310 	add.w	r3, r7, #16
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a1c      	ldr	r2, [pc, #112]	; (8001208 <HAL_UART_MspInit+0x8c>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d131      	bne.n	8001200 <HAL_UART_MspInit+0x84>
 800119c:	4b1b      	ldr	r3, [pc, #108]	; (800120c <HAL_UART_MspInit+0x90>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	4a1a      	ldr	r2, [pc, #104]	; (800120c <HAL_UART_MspInit+0x90>)
 80011a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a6:	6193      	str	r3, [r2, #24]
 80011a8:	4b18      	ldr	r3, [pc, #96]	; (800120c <HAL_UART_MspInit+0x90>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	4b15      	ldr	r3, [pc, #84]	; (800120c <HAL_UART_MspInit+0x90>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	4a14      	ldr	r2, [pc, #80]	; (800120c <HAL_UART_MspInit+0x90>)
 80011ba:	f043 0304 	orr.w	r3, r3, #4
 80011be:	6193      	str	r3, [r2, #24]
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_UART_MspInit+0x90>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	f003 0304 	and.w	r3, r3, #4
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011d0:	613b      	str	r3, [r7, #16]
 80011d2:	2302      	movs	r3, #2
 80011d4:	617b      	str	r3, [r7, #20]
 80011d6:	2303      	movs	r3, #3
 80011d8:	61fb      	str	r3, [r7, #28]
 80011da:	f107 0310 	add.w	r3, r7, #16
 80011de:	4619      	mov	r1, r3
 80011e0:	480b      	ldr	r0, [pc, #44]	; (8001210 <HAL_UART_MspInit+0x94>)
 80011e2:	f000 fe09 	bl	8001df8 <HAL_GPIO_Init>
 80011e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
 80011f0:	2300      	movs	r3, #0
 80011f2:	61bb      	str	r3, [r7, #24]
 80011f4:	f107 0310 	add.w	r3, r7, #16
 80011f8:	4619      	mov	r1, r3
 80011fa:	4805      	ldr	r0, [pc, #20]	; (8001210 <HAL_UART_MspInit+0x94>)
 80011fc:	f000 fdfc 	bl	8001df8 <HAL_GPIO_Init>
 8001200:	bf00      	nop
 8001202:	3720      	adds	r7, #32
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40013800 	.word	0x40013800
 800120c:	40021000 	.word	0x40021000
 8001210:	40010800 	.word	0x40010800

08001214 <NMI_Handler>:
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
 8001218:	e7fe      	b.n	8001218 <NMI_Handler+0x4>

0800121a <HardFault_Handler>:
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0
 800121e:	e7fe      	b.n	800121e <HardFault_Handler+0x4>

08001220 <MemManage_Handler>:
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
 8001224:	e7fe      	b.n	8001224 <MemManage_Handler+0x4>

08001226 <BusFault_Handler>:
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0
 800122a:	e7fe      	b.n	800122a <BusFault_Handler+0x4>

0800122c <UsageFault_Handler>:
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
 8001230:	e7fe      	b.n	8001230 <UsageFault_Handler+0x4>

08001232 <SVC_Handler>:
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr

0800123e <DebugMon_Handler>:
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0
 8001242:	bf00      	nop
 8001244:	46bd      	mov	sp, r7
 8001246:	bc80      	pop	{r7}
 8001248:	4770      	bx	lr

0800124a <PendSV_Handler>:
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr

08001256 <SysTick_Handler>:
 8001256:	b580      	push	{r7, lr}
 8001258:	af00      	add	r7, sp, #0
 800125a:	f000 f875 	bl	8001348 <HAL_IncTick>
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}

08001262 <SystemInit>:
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0
 8001266:	bf00      	nop
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr
	...

08001270 <Reset_Handler>:
 8001270:	f7ff fff7 	bl	8001262 <SystemInit>
 8001274:	480b      	ldr	r0, [pc, #44]	; (80012a4 <LoopFillZerobss+0xe>)
 8001276:	490c      	ldr	r1, [pc, #48]	; (80012a8 <LoopFillZerobss+0x12>)
 8001278:	4a0c      	ldr	r2, [pc, #48]	; (80012ac <LoopFillZerobss+0x16>)
 800127a:	2300      	movs	r3, #0
 800127c:	e002      	b.n	8001284 <LoopCopyDataInit>

0800127e <CopyDataInit>:
 800127e:	58d4      	ldr	r4, [r2, r3]
 8001280:	50c4      	str	r4, [r0, r3]
 8001282:	3304      	adds	r3, #4

08001284 <LoopCopyDataInit>:
 8001284:	18c4      	adds	r4, r0, r3
 8001286:	428c      	cmp	r4, r1
 8001288:	d3f9      	bcc.n	800127e <CopyDataInit>
 800128a:	4a09      	ldr	r2, [pc, #36]	; (80012b0 <LoopFillZerobss+0x1a>)
 800128c:	4c09      	ldr	r4, [pc, #36]	; (80012b4 <LoopFillZerobss+0x1e>)
 800128e:	2300      	movs	r3, #0
 8001290:	e001      	b.n	8001296 <LoopFillZerobss>

08001292 <FillZerobss>:
 8001292:	6013      	str	r3, [r2, #0]
 8001294:	3204      	adds	r2, #4

08001296 <LoopFillZerobss>:
 8001296:	42a2      	cmp	r2, r4
 8001298:	d3fb      	bcc.n	8001292 <FillZerobss>
 800129a:	f001 ff1f 	bl	80030dc <__libc_init_array>
 800129e:	f7ff fd03 	bl	8000ca8 <main>
 80012a2:	4770      	bx	lr
 80012a4:	20000000 	.word	0x20000000
 80012a8:	20000020 	.word	0x20000020
 80012ac:	08003198 	.word	0x08003198
 80012b0:	20000020 	.word	0x20000020
 80012b4:	200000cc 	.word	0x200000cc

080012b8 <ADC1_2_IRQHandler>:
 80012b8:	e7fe      	b.n	80012b8 <ADC1_2_IRQHandler>
	...

080012bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <HAL_Init+0x28>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a07      	ldr	r2, [pc, #28]	; (80012e4 <HAL_Init+0x28>)
 80012c6:	f043 0310 	orr.w	r3, r3, #16
 80012ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012cc:	2003      	movs	r0, #3
 80012ce:	f000 fd5f 	bl	8001d90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012d2:	200f      	movs	r0, #15
 80012d4:	f000 f808 	bl	80012e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012d8:	f7ff fef2 	bl	80010c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40022000 	.word	0x40022000

080012e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <HAL_InitTick+0x54>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <HAL_InitTick+0x58>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	4619      	mov	r1, r3
 80012fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001302:	fbb2 f3f3 	udiv	r3, r2, r3
 8001306:	4618      	mov	r0, r3
 8001308:	f000 fd69 	bl	8001dde <HAL_SYSTICK_Config>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e00e      	b.n	8001334 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2b0f      	cmp	r3, #15
 800131a:	d80a      	bhi.n	8001332 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800131c:	2200      	movs	r2, #0
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	f04f 30ff 	mov.w	r0, #4294967295
 8001324:	f000 fd3f 	bl	8001da6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001328:	4a06      	ldr	r2, [pc, #24]	; (8001344 <HAL_InitTick+0x5c>)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800132e:	2300      	movs	r3, #0
 8001330:	e000      	b.n	8001334 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
}
 8001334:	4618      	mov	r0, r3
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000014 	.word	0x20000014
 8001340:	2000001c 	.word	0x2000001c
 8001344:	20000018 	.word	0x20000018

08001348 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800134c:	4b05      	ldr	r3, [pc, #20]	; (8001364 <HAL_IncTick+0x1c>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	461a      	mov	r2, r3
 8001352:	4b05      	ldr	r3, [pc, #20]	; (8001368 <HAL_IncTick+0x20>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4413      	add	r3, r2
 8001358:	4a03      	ldr	r2, [pc, #12]	; (8001368 <HAL_IncTick+0x20>)
 800135a:	6013      	str	r3, [r2, #0]
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr
 8001364:	2000001c 	.word	0x2000001c
 8001368:	200000c8 	.word	0x200000c8

0800136c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return uwTick;
 8001370:	4b02      	ldr	r3, [pc, #8]	; (800137c <HAL_GetTick+0x10>)
 8001372:	681b      	ldr	r3, [r3, #0]
}
 8001374:	4618      	mov	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr
 800137c:	200000c8 	.word	0x200000c8

08001380 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001388:	2300      	movs	r3, #0
 800138a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800138c:	2300      	movs	r3, #0
 800138e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001390:	2300      	movs	r3, #0
 8001392:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001394:	2300      	movs	r3, #0
 8001396:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d101      	bne.n	80013a2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e0be      	b.n	8001520 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d109      	bne.n	80013c4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff fea0 	bl	8001104 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f000 fbf1 	bl	8001bac <ADC_ConversionStop_Disable>
 80013ca:	4603      	mov	r3, r0
 80013cc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d2:	f003 0310 	and.w	r3, r3, #16
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f040 8099 	bne.w	800150e <HAL_ADC_Init+0x18e>
 80013dc:	7dfb      	ldrb	r3, [r7, #23]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f040 8095 	bne.w	800150e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013ec:	f023 0302 	bic.w	r3, r3, #2
 80013f0:	f043 0202 	orr.w	r2, r3, #2
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001400:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	7b1b      	ldrb	r3, [r3, #12]
 8001406:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001408:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	4313      	orrs	r3, r2
 800140e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001418:	d003      	beq.n	8001422 <HAL_ADC_Init+0xa2>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d102      	bne.n	8001428 <HAL_ADC_Init+0xa8>
 8001422:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001426:	e000      	b.n	800142a <HAL_ADC_Init+0xaa>
 8001428:	2300      	movs	r3, #0
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	7d1b      	ldrb	r3, [r3, #20]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d119      	bne.n	800146c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	7b1b      	ldrb	r3, [r3, #12]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d109      	bne.n	8001454 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	3b01      	subs	r3, #1
 8001446:	035a      	lsls	r2, r3, #13
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	4313      	orrs	r3, r2
 800144c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	e00b      	b.n	800146c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001458:	f043 0220 	orr.w	r2, r3, #32
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001464:	f043 0201 	orr.w	r2, r3, #1
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	430a      	orrs	r2, r1
 800147e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	689a      	ldr	r2, [r3, #8]
 8001486:	4b28      	ldr	r3, [pc, #160]	; (8001528 <HAL_ADC_Init+0x1a8>)
 8001488:	4013      	ands	r3, r2
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	6812      	ldr	r2, [r2, #0]
 800148e:	68b9      	ldr	r1, [r7, #8]
 8001490:	430b      	orrs	r3, r1
 8001492:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800149c:	d003      	beq.n	80014a6 <HAL_ADC_Init+0x126>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d104      	bne.n	80014b0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	051b      	lsls	r3, r3, #20
 80014ae:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	68fa      	ldr	r2, [r7, #12]
 80014c0:	430a      	orrs	r2, r1
 80014c2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	689a      	ldr	r2, [r3, #8]
 80014ca:	4b18      	ldr	r3, [pc, #96]	; (800152c <HAL_ADC_Init+0x1ac>)
 80014cc:	4013      	ands	r3, r2
 80014ce:	68ba      	ldr	r2, [r7, #8]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d10b      	bne.n	80014ec <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014de:	f023 0303 	bic.w	r3, r3, #3
 80014e2:	f043 0201 	orr.w	r2, r3, #1
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014ea:	e018      	b.n	800151e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f0:	f023 0312 	bic.w	r3, r3, #18
 80014f4:	f043 0210 	orr.w	r2, r3, #16
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001500:	f043 0201 	orr.w	r2, r3, #1
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800150c:	e007      	b.n	800151e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001512:	f043 0210 	orr.w	r2, r3, #16
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800151e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	ffe1f7fd 	.word	0xffe1f7fd
 800152c:	ff1f0efe 	.word	0xff1f0efe

08001530 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001538:	2300      	movs	r3, #0
 800153a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001542:	2b01      	cmp	r3, #1
 8001544:	d101      	bne.n	800154a <HAL_ADC_Start+0x1a>
 8001546:	2302      	movs	r3, #2
 8001548:	e098      	b.n	800167c <HAL_ADC_Start+0x14c>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2201      	movs	r2, #1
 800154e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f000 fad0 	bl	8001af8 <ADC_Enable>
 8001558:	4603      	mov	r3, r0
 800155a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800155c:	7bfb      	ldrb	r3, [r7, #15]
 800155e:	2b00      	cmp	r3, #0
 8001560:	f040 8087 	bne.w	8001672 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001568:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800156c:	f023 0301 	bic.w	r3, r3, #1
 8001570:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a41      	ldr	r2, [pc, #260]	; (8001684 <HAL_ADC_Start+0x154>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d105      	bne.n	800158e <HAL_ADC_Start+0x5e>
 8001582:	4b41      	ldr	r3, [pc, #260]	; (8001688 <HAL_ADC_Start+0x158>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d115      	bne.n	80015ba <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001592:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d026      	beq.n	80015f6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015b0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015b8:	e01d      	b.n	80015f6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a2f      	ldr	r2, [pc, #188]	; (8001688 <HAL_ADC_Start+0x158>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d004      	beq.n	80015da <HAL_ADC_Start+0xaa>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a2b      	ldr	r2, [pc, #172]	; (8001684 <HAL_ADC_Start+0x154>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d10d      	bne.n	80015f6 <HAL_ADC_Start+0xc6>
 80015da:	4b2b      	ldr	r3, [pc, #172]	; (8001688 <HAL_ADC_Start+0x158>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d007      	beq.n	80015f6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015ee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d006      	beq.n	8001610 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001606:	f023 0206 	bic.w	r2, r3, #6
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	62da      	str	r2, [r3, #44]	; 0x2c
 800160e:	e002      	b.n	8001616 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f06f 0202 	mvn.w	r2, #2
 8001626:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001632:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001636:	d113      	bne.n	8001660 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800163c:	4a11      	ldr	r2, [pc, #68]	; (8001684 <HAL_ADC_Start+0x154>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d105      	bne.n	800164e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001642:	4b11      	ldr	r3, [pc, #68]	; (8001688 <HAL_ADC_Start+0x158>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800164a:	2b00      	cmp	r3, #0
 800164c:	d108      	bne.n	8001660 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	e00c      	b.n	800167a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	689a      	ldr	r2, [r3, #8]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	e003      	b.n	800167a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800167a:	7bfb      	ldrb	r3, [r7, #15]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40012800 	.word	0x40012800
 8001688:	40012400 	.word	0x40012400

0800168c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001694:	2300      	movs	r3, #0
 8001696:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d101      	bne.n	80016a6 <HAL_ADC_Stop+0x1a>
 80016a2:	2302      	movs	r3, #2
 80016a4:	e01a      	b.n	80016dc <HAL_ADC_Stop+0x50>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2201      	movs	r2, #1
 80016aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 fa7c 	bl	8001bac <ADC_ConversionStop_Disable>
 80016b4:	4603      	mov	r3, r0
 80016b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80016b8:	7bfb      	ldrb	r3, [r7, #15]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d109      	bne.n	80016d2 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016c6:	f023 0301 	bic.w	r3, r3, #1
 80016ca:	f043 0201 	orr.w	r2, r3, #1
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80016da:	7bfb      	ldrb	r3, [r7, #15]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80016e4:	b590      	push	{r4, r7, lr}
 80016e6:	b087      	sub	sp, #28
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80016f6:	2300      	movs	r3, #0
 80016f8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80016fa:	f7ff fe37 	bl	800136c <HAL_GetTick>
 80016fe:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800170a:	2b00      	cmp	r3, #0
 800170c:	d00b      	beq.n	8001726 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001712:	f043 0220 	orr.w	r2, r3, #32
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e0d3      	b.n	80018ce <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001730:	2b00      	cmp	r3, #0
 8001732:	d131      	bne.n	8001798 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800173e:	2b00      	cmp	r3, #0
 8001740:	d12a      	bne.n	8001798 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001742:	e021      	b.n	8001788 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800174a:	d01d      	beq.n	8001788 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d007      	beq.n	8001762 <HAL_ADC_PollForConversion+0x7e>
 8001752:	f7ff fe0b 	bl	800136c <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	429a      	cmp	r2, r3
 8001760:	d212      	bcs.n	8001788 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d10b      	bne.n	8001788 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001774:	f043 0204 	orr.w	r2, r3, #4
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e0a2      	b.n	80018ce <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d0d6      	beq.n	8001744 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001796:	e070      	b.n	800187a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001798:	4b4f      	ldr	r3, [pc, #316]	; (80018d8 <HAL_ADC_PollForConversion+0x1f4>)
 800179a:	681c      	ldr	r4, [r3, #0]
 800179c:	2002      	movs	r0, #2
 800179e:	f001 f985 	bl	8002aac <HAL_RCCEx_GetPeriphCLKFreq>
 80017a2:	4603      	mov	r3, r0
 80017a4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6919      	ldr	r1, [r3, #16]
 80017ae:	4b4b      	ldr	r3, [pc, #300]	; (80018dc <HAL_ADC_PollForConversion+0x1f8>)
 80017b0:	400b      	ands	r3, r1
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d118      	bne.n	80017e8 <HAL_ADC_PollForConversion+0x104>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	68d9      	ldr	r1, [r3, #12]
 80017bc:	4b48      	ldr	r3, [pc, #288]	; (80018e0 <HAL_ADC_PollForConversion+0x1fc>)
 80017be:	400b      	ands	r3, r1
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d111      	bne.n	80017e8 <HAL_ADC_PollForConversion+0x104>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6919      	ldr	r1, [r3, #16]
 80017ca:	4b46      	ldr	r3, [pc, #280]	; (80018e4 <HAL_ADC_PollForConversion+0x200>)
 80017cc:	400b      	ands	r3, r1
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d108      	bne.n	80017e4 <HAL_ADC_PollForConversion+0x100>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	68d9      	ldr	r1, [r3, #12]
 80017d8:	4b43      	ldr	r3, [pc, #268]	; (80018e8 <HAL_ADC_PollForConversion+0x204>)
 80017da:	400b      	ands	r3, r1
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d101      	bne.n	80017e4 <HAL_ADC_PollForConversion+0x100>
 80017e0:	2314      	movs	r3, #20
 80017e2:	e020      	b.n	8001826 <HAL_ADC_PollForConversion+0x142>
 80017e4:	2329      	movs	r3, #41	; 0x29
 80017e6:	e01e      	b.n	8001826 <HAL_ADC_PollForConversion+0x142>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6919      	ldr	r1, [r3, #16]
 80017ee:	4b3d      	ldr	r3, [pc, #244]	; (80018e4 <HAL_ADC_PollForConversion+0x200>)
 80017f0:	400b      	ands	r3, r1
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d106      	bne.n	8001804 <HAL_ADC_PollForConversion+0x120>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	68d9      	ldr	r1, [r3, #12]
 80017fc:	4b3a      	ldr	r3, [pc, #232]	; (80018e8 <HAL_ADC_PollForConversion+0x204>)
 80017fe:	400b      	ands	r3, r1
 8001800:	2b00      	cmp	r3, #0
 8001802:	d00d      	beq.n	8001820 <HAL_ADC_PollForConversion+0x13c>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6919      	ldr	r1, [r3, #16]
 800180a:	4b38      	ldr	r3, [pc, #224]	; (80018ec <HAL_ADC_PollForConversion+0x208>)
 800180c:	400b      	ands	r3, r1
 800180e:	2b00      	cmp	r3, #0
 8001810:	d108      	bne.n	8001824 <HAL_ADC_PollForConversion+0x140>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	68d9      	ldr	r1, [r3, #12]
 8001818:	4b34      	ldr	r3, [pc, #208]	; (80018ec <HAL_ADC_PollForConversion+0x208>)
 800181a:	400b      	ands	r3, r1
 800181c:	2b00      	cmp	r3, #0
 800181e:	d101      	bne.n	8001824 <HAL_ADC_PollForConversion+0x140>
 8001820:	2354      	movs	r3, #84	; 0x54
 8001822:	e000      	b.n	8001826 <HAL_ADC_PollForConversion+0x142>
 8001824:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001826:	fb02 f303 	mul.w	r3, r2, r3
 800182a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800182c:	e021      	b.n	8001872 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001834:	d01a      	beq.n	800186c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d007      	beq.n	800184c <HAL_ADC_PollForConversion+0x168>
 800183c:	f7ff fd96 	bl	800136c <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	429a      	cmp	r2, r3
 800184a:	d20f      	bcs.n	800186c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	429a      	cmp	r2, r3
 8001852:	d90b      	bls.n	800186c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001858:	f043 0204 	orr.w	r2, r3, #4
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e030      	b.n	80018ce <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	3301      	adds	r3, #1
 8001870:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	429a      	cmp	r2, r3
 8001878:	d8d9      	bhi.n	800182e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f06f 0212 	mvn.w	r2, #18
 8001882:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001888:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800189a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800189e:	d115      	bne.n	80018cc <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d111      	bne.n	80018cc <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d105      	bne.n	80018cc <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c4:	f043 0201 	orr.w	r2, r3, #1
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	371c      	adds	r7, #28
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd90      	pop	{r4, r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000014 	.word	0x20000014
 80018dc:	24924924 	.word	0x24924924
 80018e0:	00924924 	.word	0x00924924
 80018e4:	12492492 	.word	0x12492492
 80018e8:	00492492 	.word	0x00492492
 80018ec:	00249249 	.word	0x00249249

080018f0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80018fe:	4618      	mov	r0, r3
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr

08001908 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001912:	2300      	movs	r3, #0
 8001914:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001916:	2300      	movs	r3, #0
 8001918:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001920:	2b01      	cmp	r3, #1
 8001922:	d101      	bne.n	8001928 <HAL_ADC_ConfigChannel+0x20>
 8001924:	2302      	movs	r3, #2
 8001926:	e0dc      	b.n	8001ae2 <HAL_ADC_ConfigChannel+0x1da>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	2b06      	cmp	r3, #6
 8001936:	d81c      	bhi.n	8001972 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685a      	ldr	r2, [r3, #4]
 8001942:	4613      	mov	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4413      	add	r3, r2
 8001948:	3b05      	subs	r3, #5
 800194a:	221f      	movs	r2, #31
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	4019      	ands	r1, r3
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	6818      	ldr	r0, [r3, #0]
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	4613      	mov	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4413      	add	r3, r2
 8001962:	3b05      	subs	r3, #5
 8001964:	fa00 f203 	lsl.w	r2, r0, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	430a      	orrs	r2, r1
 800196e:	635a      	str	r2, [r3, #52]	; 0x34
 8001970:	e03c      	b.n	80019ec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	2b0c      	cmp	r3, #12
 8001978:	d81c      	bhi.n	80019b4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	4613      	mov	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4413      	add	r3, r2
 800198a:	3b23      	subs	r3, #35	; 0x23
 800198c:	221f      	movs	r2, #31
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43db      	mvns	r3, r3
 8001994:	4019      	ands	r1, r3
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	6818      	ldr	r0, [r3, #0]
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685a      	ldr	r2, [r3, #4]
 800199e:	4613      	mov	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	3b23      	subs	r3, #35	; 0x23
 80019a6:	fa00 f203 	lsl.w	r2, r0, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	430a      	orrs	r2, r1
 80019b0:	631a      	str	r2, [r3, #48]	; 0x30
 80019b2:	e01b      	b.n	80019ec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	4613      	mov	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	3b41      	subs	r3, #65	; 0x41
 80019c6:	221f      	movs	r2, #31
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	43db      	mvns	r3, r3
 80019ce:	4019      	ands	r1, r3
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	6818      	ldr	r0, [r3, #0]
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685a      	ldr	r2, [r3, #4]
 80019d8:	4613      	mov	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	3b41      	subs	r3, #65	; 0x41
 80019e0:	fa00 f203 	lsl.w	r2, r0, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b09      	cmp	r3, #9
 80019f2:	d91c      	bls.n	8001a2e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	68d9      	ldr	r1, [r3, #12]
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	4613      	mov	r3, r2
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	4413      	add	r3, r2
 8001a04:	3b1e      	subs	r3, #30
 8001a06:	2207      	movs	r2, #7
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	4019      	ands	r1, r3
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	6898      	ldr	r0, [r3, #8]
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	4413      	add	r3, r2
 8001a1e:	3b1e      	subs	r3, #30
 8001a20:	fa00 f203 	lsl.w	r2, r0, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	60da      	str	r2, [r3, #12]
 8001a2c:	e019      	b.n	8001a62 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6919      	ldr	r1, [r3, #16]
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	4413      	add	r3, r2
 8001a3e:	2207      	movs	r2, #7
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43db      	mvns	r3, r3
 8001a46:	4019      	ands	r1, r3
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	6898      	ldr	r0, [r3, #8]
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	4613      	mov	r3, r2
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	4413      	add	r3, r2
 8001a56:	fa00 f203 	lsl.w	r2, r0, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2b10      	cmp	r3, #16
 8001a68:	d003      	beq.n	8001a72 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a6e:	2b11      	cmp	r3, #17
 8001a70:	d132      	bne.n	8001ad8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a1d      	ldr	r2, [pc, #116]	; (8001aec <HAL_ADC_ConfigChannel+0x1e4>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d125      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d126      	bne.n	8001ad8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001a98:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2b10      	cmp	r3, #16
 8001aa0:	d11a      	bne.n	8001ad8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001aa2:	4b13      	ldr	r3, [pc, #76]	; (8001af0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a13      	ldr	r2, [pc, #76]	; (8001af4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8001aac:	0c9a      	lsrs	r2, r3, #18
 8001aae:	4613      	mov	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ab8:	e002      	b.n	8001ac0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	3b01      	subs	r3, #1
 8001abe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1f9      	bne.n	8001aba <HAL_ADC_ConfigChannel+0x1b2>
 8001ac6:	e007      	b.n	8001ad8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001acc:	f043 0220 	orr.w	r2, r3, #32
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3714      	adds	r7, #20
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr
 8001aec:	40012400 	.word	0x40012400
 8001af0:	20000014 	.word	0x20000014
 8001af4:	431bde83 	.word	0x431bde83

08001af8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001b04:	2300      	movs	r3, #0
 8001b06:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d040      	beq.n	8001b98 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f042 0201 	orr.w	r2, r2, #1
 8001b24:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b26:	4b1f      	ldr	r3, [pc, #124]	; (8001ba4 <ADC_Enable+0xac>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a1f      	ldr	r2, [pc, #124]	; (8001ba8 <ADC_Enable+0xb0>)
 8001b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b30:	0c9b      	lsrs	r3, r3, #18
 8001b32:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b34:	e002      	b.n	8001b3c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f9      	bne.n	8001b36 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b42:	f7ff fc13 	bl	800136c <HAL_GetTick>
 8001b46:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001b48:	e01f      	b.n	8001b8a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001b4a:	f7ff fc0f 	bl	800136c <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d918      	bls.n	8001b8a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d011      	beq.n	8001b8a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6a:	f043 0210 	orr.w	r2, r3, #16
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b76:	f043 0201 	orr.w	r2, r3, #1
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e007      	b.n	8001b9a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d1d8      	bne.n	8001b4a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000014 	.word	0x20000014
 8001ba8:	431bde83 	.word	0x431bde83

08001bac <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d12e      	bne.n	8001c24 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f022 0201 	bic.w	r2, r2, #1
 8001bd4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001bd6:	f7ff fbc9 	bl	800136c <HAL_GetTick>
 8001bda:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001bdc:	e01b      	b.n	8001c16 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001bde:	f7ff fbc5 	bl	800136c <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d914      	bls.n	8001c16 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d10d      	bne.n	8001c16 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfe:	f043 0210 	orr.w	r2, r3, #16
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0a:	f043 0201 	orr.w	r2, r3, #1
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e007      	b.n	8001c26 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d0dc      	beq.n	8001bde <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
	...

08001c30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c40:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <__NVIC_SetPriorityGrouping+0x44>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c46:	68ba      	ldr	r2, [r7, #8]
 8001c48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c62:	4a04      	ldr	r2, [pc, #16]	; (8001c74 <__NVIC_SetPriorityGrouping+0x44>)
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	60d3      	str	r3, [r2, #12]
}
 8001c68:	bf00      	nop
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c7c:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <__NVIC_GetPriorityGrouping+0x18>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	0a1b      	lsrs	r3, r3, #8
 8001c82:	f003 0307 	and.w	r3, r3, #7
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc80      	pop	{r7}
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	6039      	str	r1, [r7, #0]
 8001c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	db0a      	blt.n	8001cbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	b2da      	uxtb	r2, r3
 8001cac:	490c      	ldr	r1, [pc, #48]	; (8001ce0 <__NVIC_SetPriority+0x4c>)
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	0112      	lsls	r2, r2, #4
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	440b      	add	r3, r1
 8001cb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cbc:	e00a      	b.n	8001cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	4908      	ldr	r1, [pc, #32]	; (8001ce4 <__NVIC_SetPriority+0x50>)
 8001cc4:	79fb      	ldrb	r3, [r7, #7]
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	3b04      	subs	r3, #4
 8001ccc:	0112      	lsls	r2, r2, #4
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	440b      	add	r3, r1
 8001cd2:	761a      	strb	r2, [r3, #24]
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	e000e100 	.word	0xe000e100
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b089      	sub	sp, #36	; 0x24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	f1c3 0307 	rsb	r3, r3, #7
 8001d02:	2b04      	cmp	r3, #4
 8001d04:	bf28      	it	cs
 8001d06:	2304      	movcs	r3, #4
 8001d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	2b06      	cmp	r3, #6
 8001d10:	d902      	bls.n	8001d18 <NVIC_EncodePriority+0x30>
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	3b03      	subs	r3, #3
 8001d16:	e000      	b.n	8001d1a <NVIC_EncodePriority+0x32>
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	43da      	mvns	r2, r3
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	401a      	ands	r2, r3
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d30:	f04f 31ff 	mov.w	r1, #4294967295
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3a:	43d9      	mvns	r1, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d40:	4313      	orrs	r3, r2
         );
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3724      	adds	r7, #36	; 0x24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr

08001d4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3b01      	subs	r3, #1
 8001d58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d5c:	d301      	bcc.n	8001d62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e00f      	b.n	8001d82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d62:	4a0a      	ldr	r2, [pc, #40]	; (8001d8c <SysTick_Config+0x40>)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d6a:	210f      	movs	r1, #15
 8001d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d70:	f7ff ff90 	bl	8001c94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d74:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <SysTick_Config+0x40>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d7a:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <SysTick_Config+0x40>)
 8001d7c:	2207      	movs	r2, #7
 8001d7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	e000e010 	.word	0xe000e010

08001d90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7ff ff49 	bl	8001c30 <__NVIC_SetPriorityGrouping>
}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b086      	sub	sp, #24
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	4603      	mov	r3, r0
 8001dae:	60b9      	str	r1, [r7, #8]
 8001db0:	607a      	str	r2, [r7, #4]
 8001db2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001db8:	f7ff ff5e 	bl	8001c78 <__NVIC_GetPriorityGrouping>
 8001dbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	68b9      	ldr	r1, [r7, #8]
 8001dc2:	6978      	ldr	r0, [r7, #20]
 8001dc4:	f7ff ff90 	bl	8001ce8 <NVIC_EncodePriority>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dce:	4611      	mov	r1, r2
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff ff5f 	bl	8001c94 <__NVIC_SetPriority>
}
 8001dd6:	bf00      	nop
 8001dd8:	3718      	adds	r7, #24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7ff ffb0 	bl	8001d4c <SysTick_Config>
 8001dec:	4603      	mov	r3, r0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
	...

08001df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b08b      	sub	sp, #44	; 0x2c
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e02:	2300      	movs	r3, #0
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e06:	2300      	movs	r3, #0
 8001e08:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e0a:	e161      	b.n	80020d0 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	69fa      	ldr	r2, [r7, #28]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	f040 8150 	bne.w	80020ca <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	4a97      	ldr	r2, [pc, #604]	; (800208c <HAL_GPIO_Init+0x294>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d05e      	beq.n	8001ef2 <HAL_GPIO_Init+0xfa>
 8001e34:	4a95      	ldr	r2, [pc, #596]	; (800208c <HAL_GPIO_Init+0x294>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d875      	bhi.n	8001f26 <HAL_GPIO_Init+0x12e>
 8001e3a:	4a95      	ldr	r2, [pc, #596]	; (8002090 <HAL_GPIO_Init+0x298>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d058      	beq.n	8001ef2 <HAL_GPIO_Init+0xfa>
 8001e40:	4a93      	ldr	r2, [pc, #588]	; (8002090 <HAL_GPIO_Init+0x298>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d86f      	bhi.n	8001f26 <HAL_GPIO_Init+0x12e>
 8001e46:	4a93      	ldr	r2, [pc, #588]	; (8002094 <HAL_GPIO_Init+0x29c>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d052      	beq.n	8001ef2 <HAL_GPIO_Init+0xfa>
 8001e4c:	4a91      	ldr	r2, [pc, #580]	; (8002094 <HAL_GPIO_Init+0x29c>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d869      	bhi.n	8001f26 <HAL_GPIO_Init+0x12e>
 8001e52:	4a91      	ldr	r2, [pc, #580]	; (8002098 <HAL_GPIO_Init+0x2a0>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d04c      	beq.n	8001ef2 <HAL_GPIO_Init+0xfa>
 8001e58:	4a8f      	ldr	r2, [pc, #572]	; (8002098 <HAL_GPIO_Init+0x2a0>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d863      	bhi.n	8001f26 <HAL_GPIO_Init+0x12e>
 8001e5e:	4a8f      	ldr	r2, [pc, #572]	; (800209c <HAL_GPIO_Init+0x2a4>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d046      	beq.n	8001ef2 <HAL_GPIO_Init+0xfa>
 8001e64:	4a8d      	ldr	r2, [pc, #564]	; (800209c <HAL_GPIO_Init+0x2a4>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d85d      	bhi.n	8001f26 <HAL_GPIO_Init+0x12e>
 8001e6a:	2b12      	cmp	r3, #18
 8001e6c:	d82a      	bhi.n	8001ec4 <HAL_GPIO_Init+0xcc>
 8001e6e:	2b12      	cmp	r3, #18
 8001e70:	d859      	bhi.n	8001f26 <HAL_GPIO_Init+0x12e>
 8001e72:	a201      	add	r2, pc, #4	; (adr r2, 8001e78 <HAL_GPIO_Init+0x80>)
 8001e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e78:	08001ef3 	.word	0x08001ef3
 8001e7c:	08001ecd 	.word	0x08001ecd
 8001e80:	08001edf 	.word	0x08001edf
 8001e84:	08001f21 	.word	0x08001f21
 8001e88:	08001f27 	.word	0x08001f27
 8001e8c:	08001f27 	.word	0x08001f27
 8001e90:	08001f27 	.word	0x08001f27
 8001e94:	08001f27 	.word	0x08001f27
 8001e98:	08001f27 	.word	0x08001f27
 8001e9c:	08001f27 	.word	0x08001f27
 8001ea0:	08001f27 	.word	0x08001f27
 8001ea4:	08001f27 	.word	0x08001f27
 8001ea8:	08001f27 	.word	0x08001f27
 8001eac:	08001f27 	.word	0x08001f27
 8001eb0:	08001f27 	.word	0x08001f27
 8001eb4:	08001f27 	.word	0x08001f27
 8001eb8:	08001f27 	.word	0x08001f27
 8001ebc:	08001ed5 	.word	0x08001ed5
 8001ec0:	08001ee9 	.word	0x08001ee9
 8001ec4:	4a76      	ldr	r2, [pc, #472]	; (80020a0 <HAL_GPIO_Init+0x2a8>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d013      	beq.n	8001ef2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001eca:	e02c      	b.n	8001f26 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	623b      	str	r3, [r7, #32]
          break;
 8001ed2:	e029      	b.n	8001f28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	3304      	adds	r3, #4
 8001eda:	623b      	str	r3, [r7, #32]
          break;
 8001edc:	e024      	b.n	8001f28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	3308      	adds	r3, #8
 8001ee4:	623b      	str	r3, [r7, #32]
          break;
 8001ee6:	e01f      	b.n	8001f28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	330c      	adds	r3, #12
 8001eee:	623b      	str	r3, [r7, #32]
          break;
 8001ef0:	e01a      	b.n	8001f28 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d102      	bne.n	8001f00 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001efa:	2304      	movs	r3, #4
 8001efc:	623b      	str	r3, [r7, #32]
          break;
 8001efe:	e013      	b.n	8001f28 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d105      	bne.n	8001f14 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f08:	2308      	movs	r3, #8
 8001f0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	69fa      	ldr	r2, [r7, #28]
 8001f10:	611a      	str	r2, [r3, #16]
          break;
 8001f12:	e009      	b.n	8001f28 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f14:	2308      	movs	r3, #8
 8001f16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	69fa      	ldr	r2, [r7, #28]
 8001f1c:	615a      	str	r2, [r3, #20]
          break;
 8001f1e:	e003      	b.n	8001f28 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f20:	2300      	movs	r3, #0
 8001f22:	623b      	str	r3, [r7, #32]
          break;
 8001f24:	e000      	b.n	8001f28 <HAL_GPIO_Init+0x130>
          break;
 8001f26:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	2bff      	cmp	r3, #255	; 0xff
 8001f2c:	d801      	bhi.n	8001f32 <HAL_GPIO_Init+0x13a>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	e001      	b.n	8001f36 <HAL_GPIO_Init+0x13e>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	3304      	adds	r3, #4
 8001f36:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	2bff      	cmp	r3, #255	; 0xff
 8001f3c:	d802      	bhi.n	8001f44 <HAL_GPIO_Init+0x14c>
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	e002      	b.n	8001f4a <HAL_GPIO_Init+0x152>
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	3b08      	subs	r3, #8
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	210f      	movs	r1, #15
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	fa01 f303 	lsl.w	r3, r1, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	401a      	ands	r2, r3
 8001f5c:	6a39      	ldr	r1, [r7, #32]
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	fa01 f303 	lsl.w	r3, r1, r3
 8001f64:	431a      	orrs	r2, r3
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f000 80a9 	beq.w	80020ca <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f78:	4b4a      	ldr	r3, [pc, #296]	; (80020a4 <HAL_GPIO_Init+0x2ac>)
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	4a49      	ldr	r2, [pc, #292]	; (80020a4 <HAL_GPIO_Init+0x2ac>)
 8001f7e:	f043 0301 	orr.w	r3, r3, #1
 8001f82:	6193      	str	r3, [r2, #24]
 8001f84:	4b47      	ldr	r3, [pc, #284]	; (80020a4 <HAL_GPIO_Init+0x2ac>)
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	60bb      	str	r3, [r7, #8]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f90:	4a45      	ldr	r2, [pc, #276]	; (80020a8 <HAL_GPIO_Init+0x2b0>)
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	089b      	lsrs	r3, r3, #2
 8001f96:	3302      	adds	r3, #2
 8001f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f9c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	f003 0303 	and.w	r3, r3, #3
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	220f      	movs	r2, #15
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a3d      	ldr	r2, [pc, #244]	; (80020ac <HAL_GPIO_Init+0x2b4>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d00d      	beq.n	8001fd8 <HAL_GPIO_Init+0x1e0>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a3c      	ldr	r2, [pc, #240]	; (80020b0 <HAL_GPIO_Init+0x2b8>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d007      	beq.n	8001fd4 <HAL_GPIO_Init+0x1dc>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a3b      	ldr	r2, [pc, #236]	; (80020b4 <HAL_GPIO_Init+0x2bc>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d101      	bne.n	8001fd0 <HAL_GPIO_Init+0x1d8>
 8001fcc:	2302      	movs	r3, #2
 8001fce:	e004      	b.n	8001fda <HAL_GPIO_Init+0x1e2>
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e002      	b.n	8001fda <HAL_GPIO_Init+0x1e2>
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e000      	b.n	8001fda <HAL_GPIO_Init+0x1e2>
 8001fd8:	2300      	movs	r3, #0
 8001fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fdc:	f002 0203 	and.w	r2, r2, #3
 8001fe0:	0092      	lsls	r2, r2, #2
 8001fe2:	4093      	lsls	r3, r2
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fea:	492f      	ldr	r1, [pc, #188]	; (80020a8 <HAL_GPIO_Init+0x2b0>)
 8001fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fee:	089b      	lsrs	r3, r3, #2
 8001ff0:	3302      	adds	r3, #2
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d006      	beq.n	8002012 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002004:	4b2c      	ldr	r3, [pc, #176]	; (80020b8 <HAL_GPIO_Init+0x2c0>)
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	492b      	ldr	r1, [pc, #172]	; (80020b8 <HAL_GPIO_Init+0x2c0>)
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	4313      	orrs	r3, r2
 800200e:	608b      	str	r3, [r1, #8]
 8002010:	e006      	b.n	8002020 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002012:	4b29      	ldr	r3, [pc, #164]	; (80020b8 <HAL_GPIO_Init+0x2c0>)
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	43db      	mvns	r3, r3
 800201a:	4927      	ldr	r1, [pc, #156]	; (80020b8 <HAL_GPIO_Init+0x2c0>)
 800201c:	4013      	ands	r3, r2
 800201e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d006      	beq.n	800203a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800202c:	4b22      	ldr	r3, [pc, #136]	; (80020b8 <HAL_GPIO_Init+0x2c0>)
 800202e:	68da      	ldr	r2, [r3, #12]
 8002030:	4921      	ldr	r1, [pc, #132]	; (80020b8 <HAL_GPIO_Init+0x2c0>)
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	4313      	orrs	r3, r2
 8002036:	60cb      	str	r3, [r1, #12]
 8002038:	e006      	b.n	8002048 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800203a:	4b1f      	ldr	r3, [pc, #124]	; (80020b8 <HAL_GPIO_Init+0x2c0>)
 800203c:	68da      	ldr	r2, [r3, #12]
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	43db      	mvns	r3, r3
 8002042:	491d      	ldr	r1, [pc, #116]	; (80020b8 <HAL_GPIO_Init+0x2c0>)
 8002044:	4013      	ands	r3, r2
 8002046:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d006      	beq.n	8002062 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002054:	4b18      	ldr	r3, [pc, #96]	; (80020b8 <HAL_GPIO_Init+0x2c0>)
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	4917      	ldr	r1, [pc, #92]	; (80020b8 <HAL_GPIO_Init+0x2c0>)
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	604b      	str	r3, [r1, #4]
 8002060:	e006      	b.n	8002070 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002062:	4b15      	ldr	r3, [pc, #84]	; (80020b8 <HAL_GPIO_Init+0x2c0>)
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	43db      	mvns	r3, r3
 800206a:	4913      	ldr	r1, [pc, #76]	; (80020b8 <HAL_GPIO_Init+0x2c0>)
 800206c:	4013      	ands	r3, r2
 800206e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d01f      	beq.n	80020bc <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800207c:	4b0e      	ldr	r3, [pc, #56]	; (80020b8 <HAL_GPIO_Init+0x2c0>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	490d      	ldr	r1, [pc, #52]	; (80020b8 <HAL_GPIO_Init+0x2c0>)
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	4313      	orrs	r3, r2
 8002086:	600b      	str	r3, [r1, #0]
 8002088:	e01f      	b.n	80020ca <HAL_GPIO_Init+0x2d2>
 800208a:	bf00      	nop
 800208c:	10320000 	.word	0x10320000
 8002090:	10310000 	.word	0x10310000
 8002094:	10220000 	.word	0x10220000
 8002098:	10210000 	.word	0x10210000
 800209c:	10120000 	.word	0x10120000
 80020a0:	10110000 	.word	0x10110000
 80020a4:	40021000 	.word	0x40021000
 80020a8:	40010000 	.word	0x40010000
 80020ac:	40010800 	.word	0x40010800
 80020b0:	40010c00 	.word	0x40010c00
 80020b4:	40011000 	.word	0x40011000
 80020b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020bc:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <HAL_GPIO_Init+0x2f4>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	43db      	mvns	r3, r3
 80020c4:	4909      	ldr	r1, [pc, #36]	; (80020ec <HAL_GPIO_Init+0x2f4>)
 80020c6:	4013      	ands	r3, r2
 80020c8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	3301      	adds	r3, #1
 80020ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d6:	fa22 f303 	lsr.w	r3, r2, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f47f ae96 	bne.w	8001e0c <HAL_GPIO_Init+0x14>
  }
}
 80020e0:	bf00      	nop
 80020e2:	bf00      	nop
 80020e4:	372c      	adds	r7, #44	; 0x2c
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc80      	pop	{r7}
 80020ea:	4770      	bx	lr
 80020ec:	40010400 	.word	0x40010400

080020f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	460b      	mov	r3, r1
 80020fa:	807b      	strh	r3, [r7, #2]
 80020fc:	4613      	mov	r3, r2
 80020fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002100:	787b      	ldrb	r3, [r7, #1]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002106:	887a      	ldrh	r2, [r7, #2]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800210c:	e003      	b.n	8002116 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800210e:	887b      	ldrh	r3, [r7, #2]
 8002110:	041a      	lsls	r2, r3, #16
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	611a      	str	r2, [r3, #16]
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr

08002120 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e272      	b.n	8002618 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 8087 	beq.w	800224e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002140:	4b92      	ldr	r3, [pc, #584]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 030c 	and.w	r3, r3, #12
 8002148:	2b04      	cmp	r3, #4
 800214a:	d00c      	beq.n	8002166 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800214c:	4b8f      	ldr	r3, [pc, #572]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f003 030c 	and.w	r3, r3, #12
 8002154:	2b08      	cmp	r3, #8
 8002156:	d112      	bne.n	800217e <HAL_RCC_OscConfig+0x5e>
 8002158:	4b8c      	ldr	r3, [pc, #560]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002164:	d10b      	bne.n	800217e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002166:	4b89      	ldr	r3, [pc, #548]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d06c      	beq.n	800224c <HAL_RCC_OscConfig+0x12c>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d168      	bne.n	800224c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e24c      	b.n	8002618 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002186:	d106      	bne.n	8002196 <HAL_RCC_OscConfig+0x76>
 8002188:	4b80      	ldr	r3, [pc, #512]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a7f      	ldr	r2, [pc, #508]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 800218e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002192:	6013      	str	r3, [r2, #0]
 8002194:	e02e      	b.n	80021f4 <HAL_RCC_OscConfig+0xd4>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d10c      	bne.n	80021b8 <HAL_RCC_OscConfig+0x98>
 800219e:	4b7b      	ldr	r3, [pc, #492]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a7a      	ldr	r2, [pc, #488]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 80021a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021a8:	6013      	str	r3, [r2, #0]
 80021aa:	4b78      	ldr	r3, [pc, #480]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a77      	ldr	r2, [pc, #476]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 80021b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021b4:	6013      	str	r3, [r2, #0]
 80021b6:	e01d      	b.n	80021f4 <HAL_RCC_OscConfig+0xd4>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021c0:	d10c      	bne.n	80021dc <HAL_RCC_OscConfig+0xbc>
 80021c2:	4b72      	ldr	r3, [pc, #456]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a71      	ldr	r2, [pc, #452]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 80021c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021cc:	6013      	str	r3, [r2, #0]
 80021ce:	4b6f      	ldr	r3, [pc, #444]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a6e      	ldr	r2, [pc, #440]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 80021d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	e00b      	b.n	80021f4 <HAL_RCC_OscConfig+0xd4>
 80021dc:	4b6b      	ldr	r3, [pc, #428]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a6a      	ldr	r2, [pc, #424]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 80021e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021e6:	6013      	str	r3, [r2, #0]
 80021e8:	4b68      	ldr	r3, [pc, #416]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a67      	ldr	r2, [pc, #412]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 80021ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d013      	beq.n	8002224 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fc:	f7ff f8b6 	bl	800136c <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002204:	f7ff f8b2 	bl	800136c <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b64      	cmp	r3, #100	; 0x64
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e200      	b.n	8002618 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002216:	4b5d      	ldr	r3, [pc, #372]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d0f0      	beq.n	8002204 <HAL_RCC_OscConfig+0xe4>
 8002222:	e014      	b.n	800224e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002224:	f7ff f8a2 	bl	800136c <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800222c:	f7ff f89e 	bl	800136c <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b64      	cmp	r3, #100	; 0x64
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e1ec      	b.n	8002618 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800223e:	4b53      	ldr	r3, [pc, #332]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1f0      	bne.n	800222c <HAL_RCC_OscConfig+0x10c>
 800224a:	e000      	b.n	800224e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800224c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d063      	beq.n	8002322 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800225a:	4b4c      	ldr	r3, [pc, #304]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 030c 	and.w	r3, r3, #12
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00b      	beq.n	800227e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002266:	4b49      	ldr	r3, [pc, #292]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 030c 	and.w	r3, r3, #12
 800226e:	2b08      	cmp	r3, #8
 8002270:	d11c      	bne.n	80022ac <HAL_RCC_OscConfig+0x18c>
 8002272:	4b46      	ldr	r3, [pc, #280]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d116      	bne.n	80022ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800227e:	4b43      	ldr	r3, [pc, #268]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d005      	beq.n	8002296 <HAL_RCC_OscConfig+0x176>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d001      	beq.n	8002296 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e1c0      	b.n	8002618 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002296:	4b3d      	ldr	r3, [pc, #244]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	4939      	ldr	r1, [pc, #228]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022aa:	e03a      	b.n	8002322 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d020      	beq.n	80022f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022b4:	4b36      	ldr	r3, [pc, #216]	; (8002390 <HAL_RCC_OscConfig+0x270>)
 80022b6:	2201      	movs	r2, #1
 80022b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ba:	f7ff f857 	bl	800136c <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022c2:	f7ff f853 	bl	800136c <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e1a1      	b.n	8002618 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d4:	4b2d      	ldr	r3, [pc, #180]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0f0      	beq.n	80022c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e0:	4b2a      	ldr	r3, [pc, #168]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	4927      	ldr	r1, [pc, #156]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	600b      	str	r3, [r1, #0]
 80022f4:	e015      	b.n	8002322 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022f6:	4b26      	ldr	r3, [pc, #152]	; (8002390 <HAL_RCC_OscConfig+0x270>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fc:	f7ff f836 	bl	800136c <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002304:	f7ff f832 	bl	800136c <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e180      	b.n	8002618 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002316:	4b1d      	ldr	r3, [pc, #116]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f0      	bne.n	8002304 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0308 	and.w	r3, r3, #8
 800232a:	2b00      	cmp	r3, #0
 800232c:	d03a      	beq.n	80023a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d019      	beq.n	800236a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002336:	4b17      	ldr	r3, [pc, #92]	; (8002394 <HAL_RCC_OscConfig+0x274>)
 8002338:	2201      	movs	r2, #1
 800233a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233c:	f7ff f816 	bl	800136c <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002344:	f7ff f812 	bl	800136c <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e160      	b.n	8002618 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002356:	4b0d      	ldr	r3, [pc, #52]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d0f0      	beq.n	8002344 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002362:	2001      	movs	r0, #1
 8002364:	f000 face 	bl	8002904 <RCC_Delay>
 8002368:	e01c      	b.n	80023a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800236a:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <HAL_RCC_OscConfig+0x274>)
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002370:	f7fe fffc 	bl	800136c <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002376:	e00f      	b.n	8002398 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002378:	f7fe fff8 	bl	800136c <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d908      	bls.n	8002398 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e146      	b.n	8002618 <HAL_RCC_OscConfig+0x4f8>
 800238a:	bf00      	nop
 800238c:	40021000 	.word	0x40021000
 8002390:	42420000 	.word	0x42420000
 8002394:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002398:	4b92      	ldr	r3, [pc, #584]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1e9      	bne.n	8002378 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 80a6 	beq.w	80024fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023b2:	2300      	movs	r3, #0
 80023b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023b6:	4b8b      	ldr	r3, [pc, #556]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10d      	bne.n	80023de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023c2:	4b88      	ldr	r3, [pc, #544]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	4a87      	ldr	r2, [pc, #540]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 80023c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023cc:	61d3      	str	r3, [r2, #28]
 80023ce:	4b85      	ldr	r3, [pc, #532]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d6:	60bb      	str	r3, [r7, #8]
 80023d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023da:	2301      	movs	r3, #1
 80023dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023de:	4b82      	ldr	r3, [pc, #520]	; (80025e8 <HAL_RCC_OscConfig+0x4c8>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d118      	bne.n	800241c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023ea:	4b7f      	ldr	r3, [pc, #508]	; (80025e8 <HAL_RCC_OscConfig+0x4c8>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a7e      	ldr	r2, [pc, #504]	; (80025e8 <HAL_RCC_OscConfig+0x4c8>)
 80023f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023f6:	f7fe ffb9 	bl	800136c <HAL_GetTick>
 80023fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023fc:	e008      	b.n	8002410 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023fe:	f7fe ffb5 	bl	800136c <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b64      	cmp	r3, #100	; 0x64
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e103      	b.n	8002618 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002410:	4b75      	ldr	r3, [pc, #468]	; (80025e8 <HAL_RCC_OscConfig+0x4c8>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0f0      	beq.n	80023fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d106      	bne.n	8002432 <HAL_RCC_OscConfig+0x312>
 8002424:	4b6f      	ldr	r3, [pc, #444]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	4a6e      	ldr	r2, [pc, #440]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 800242a:	f043 0301 	orr.w	r3, r3, #1
 800242e:	6213      	str	r3, [r2, #32]
 8002430:	e02d      	b.n	800248e <HAL_RCC_OscConfig+0x36e>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10c      	bne.n	8002454 <HAL_RCC_OscConfig+0x334>
 800243a:	4b6a      	ldr	r3, [pc, #424]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	4a69      	ldr	r2, [pc, #420]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 8002440:	f023 0301 	bic.w	r3, r3, #1
 8002444:	6213      	str	r3, [r2, #32]
 8002446:	4b67      	ldr	r3, [pc, #412]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	4a66      	ldr	r2, [pc, #408]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 800244c:	f023 0304 	bic.w	r3, r3, #4
 8002450:	6213      	str	r3, [r2, #32]
 8002452:	e01c      	b.n	800248e <HAL_RCC_OscConfig+0x36e>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	2b05      	cmp	r3, #5
 800245a:	d10c      	bne.n	8002476 <HAL_RCC_OscConfig+0x356>
 800245c:	4b61      	ldr	r3, [pc, #388]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	4a60      	ldr	r2, [pc, #384]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 8002462:	f043 0304 	orr.w	r3, r3, #4
 8002466:	6213      	str	r3, [r2, #32]
 8002468:	4b5e      	ldr	r3, [pc, #376]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	4a5d      	ldr	r2, [pc, #372]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 800246e:	f043 0301 	orr.w	r3, r3, #1
 8002472:	6213      	str	r3, [r2, #32]
 8002474:	e00b      	b.n	800248e <HAL_RCC_OscConfig+0x36e>
 8002476:	4b5b      	ldr	r3, [pc, #364]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	4a5a      	ldr	r2, [pc, #360]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 800247c:	f023 0301 	bic.w	r3, r3, #1
 8002480:	6213      	str	r3, [r2, #32]
 8002482:	4b58      	ldr	r3, [pc, #352]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	4a57      	ldr	r2, [pc, #348]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 8002488:	f023 0304 	bic.w	r3, r3, #4
 800248c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d015      	beq.n	80024c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002496:	f7fe ff69 	bl	800136c <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800249c:	e00a      	b.n	80024b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249e:	f7fe ff65 	bl	800136c <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e0b1      	b.n	8002618 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b4:	4b4b      	ldr	r3, [pc, #300]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0ee      	beq.n	800249e <HAL_RCC_OscConfig+0x37e>
 80024c0:	e014      	b.n	80024ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c2:	f7fe ff53 	bl	800136c <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024c8:	e00a      	b.n	80024e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ca:	f7fe ff4f 	bl	800136c <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d8:	4293      	cmp	r3, r2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e09b      	b.n	8002618 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e0:	4b40      	ldr	r3, [pc, #256]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1ee      	bne.n	80024ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024ec:	7dfb      	ldrb	r3, [r7, #23]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d105      	bne.n	80024fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f2:	4b3c      	ldr	r3, [pc, #240]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	4a3b      	ldr	r2, [pc, #236]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 80024f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 8087 	beq.w	8002616 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002508:	4b36      	ldr	r3, [pc, #216]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 030c 	and.w	r3, r3, #12
 8002510:	2b08      	cmp	r3, #8
 8002512:	d061      	beq.n	80025d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	69db      	ldr	r3, [r3, #28]
 8002518:	2b02      	cmp	r3, #2
 800251a:	d146      	bne.n	80025aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800251c:	4b33      	ldr	r3, [pc, #204]	; (80025ec <HAL_RCC_OscConfig+0x4cc>)
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002522:	f7fe ff23 	bl	800136c <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800252a:	f7fe ff1f 	bl	800136c <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e06d      	b.n	8002618 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800253c:	4b29      	ldr	r3, [pc, #164]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1f0      	bne.n	800252a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002550:	d108      	bne.n	8002564 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002552:	4b24      	ldr	r3, [pc, #144]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	4921      	ldr	r1, [pc, #132]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 8002560:	4313      	orrs	r3, r2
 8002562:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002564:	4b1f      	ldr	r3, [pc, #124]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a19      	ldr	r1, [r3, #32]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002574:	430b      	orrs	r3, r1
 8002576:	491b      	ldr	r1, [pc, #108]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 8002578:	4313      	orrs	r3, r2
 800257a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800257c:	4b1b      	ldr	r3, [pc, #108]	; (80025ec <HAL_RCC_OscConfig+0x4cc>)
 800257e:	2201      	movs	r2, #1
 8002580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002582:	f7fe fef3 	bl	800136c <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800258a:	f7fe feef 	bl	800136c <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e03d      	b.n	8002618 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800259c:	4b11      	ldr	r3, [pc, #68]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0f0      	beq.n	800258a <HAL_RCC_OscConfig+0x46a>
 80025a8:	e035      	b.n	8002616 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025aa:	4b10      	ldr	r3, [pc, #64]	; (80025ec <HAL_RCC_OscConfig+0x4cc>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b0:	f7fe fedc 	bl	800136c <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b8:	f7fe fed8 	bl	800136c <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e026      	b.n	8002618 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ca:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f0      	bne.n	80025b8 <HAL_RCC_OscConfig+0x498>
 80025d6:	e01e      	b.n	8002616 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	69db      	ldr	r3, [r3, #28]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d107      	bne.n	80025f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e019      	b.n	8002618 <HAL_RCC_OscConfig+0x4f8>
 80025e4:	40021000 	.word	0x40021000
 80025e8:	40007000 	.word	0x40007000
 80025ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025f0:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <HAL_RCC_OscConfig+0x500>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	429a      	cmp	r2, r3
 8002602:	d106      	bne.n	8002612 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800260e:	429a      	cmp	r2, r3
 8002610:	d001      	beq.n	8002616 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e000      	b.n	8002618 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40021000 	.word	0x40021000

08002624 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e0d0      	b.n	80027da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002638:	4b6a      	ldr	r3, [pc, #424]	; (80027e4 <HAL_RCC_ClockConfig+0x1c0>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	429a      	cmp	r2, r3
 8002644:	d910      	bls.n	8002668 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002646:	4b67      	ldr	r3, [pc, #412]	; (80027e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f023 0207 	bic.w	r2, r3, #7
 800264e:	4965      	ldr	r1, [pc, #404]	; (80027e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	4313      	orrs	r3, r2
 8002654:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002656:	4b63      	ldr	r3, [pc, #396]	; (80027e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0307 	and.w	r3, r3, #7
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	429a      	cmp	r2, r3
 8002662:	d001      	beq.n	8002668 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e0b8      	b.n	80027da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d020      	beq.n	80026b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b00      	cmp	r3, #0
 800267e:	d005      	beq.n	800268c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002680:	4b59      	ldr	r3, [pc, #356]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	4a58      	ldr	r2, [pc, #352]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002686:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800268a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0308 	and.w	r3, r3, #8
 8002694:	2b00      	cmp	r3, #0
 8002696:	d005      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002698:	4b53      	ldr	r3, [pc, #332]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	4a52      	ldr	r2, [pc, #328]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 800269e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026a4:	4b50      	ldr	r3, [pc, #320]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	494d      	ldr	r1, [pc, #308]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d040      	beq.n	8002744 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d107      	bne.n	80026da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ca:	4b47      	ldr	r3, [pc, #284]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d115      	bne.n	8002702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e07f      	b.n	80027da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d107      	bne.n	80026f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026e2:	4b41      	ldr	r3, [pc, #260]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d109      	bne.n	8002702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e073      	b.n	80027da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f2:	4b3d      	ldr	r3, [pc, #244]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e06b      	b.n	80027da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002702:	4b39      	ldr	r3, [pc, #228]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f023 0203 	bic.w	r2, r3, #3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	4936      	ldr	r1, [pc, #216]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002710:	4313      	orrs	r3, r2
 8002712:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002714:	f7fe fe2a 	bl	800136c <HAL_GetTick>
 8002718:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800271a:	e00a      	b.n	8002732 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800271c:	f7fe fe26 	bl	800136c <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	f241 3288 	movw	r2, #5000	; 0x1388
 800272a:	4293      	cmp	r3, r2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e053      	b.n	80027da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002732:	4b2d      	ldr	r3, [pc, #180]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f003 020c 	and.w	r2, r3, #12
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	429a      	cmp	r2, r3
 8002742:	d1eb      	bne.n	800271c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002744:	4b27      	ldr	r3, [pc, #156]	; (80027e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0307 	and.w	r3, r3, #7
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	429a      	cmp	r2, r3
 8002750:	d210      	bcs.n	8002774 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002752:	4b24      	ldr	r3, [pc, #144]	; (80027e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f023 0207 	bic.w	r2, r3, #7
 800275a:	4922      	ldr	r1, [pc, #136]	; (80027e4 <HAL_RCC_ClockConfig+0x1c0>)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	4313      	orrs	r3, r2
 8002760:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002762:	4b20      	ldr	r3, [pc, #128]	; (80027e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	429a      	cmp	r2, r3
 800276e:	d001      	beq.n	8002774 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e032      	b.n	80027da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	2b00      	cmp	r3, #0
 800277e:	d008      	beq.n	8002792 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002780:	4b19      	ldr	r3, [pc, #100]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	4916      	ldr	r1, [pc, #88]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 800278e:	4313      	orrs	r3, r2
 8002790:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0308 	and.w	r3, r3, #8
 800279a:	2b00      	cmp	r3, #0
 800279c:	d009      	beq.n	80027b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800279e:	4b12      	ldr	r3, [pc, #72]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	490e      	ldr	r1, [pc, #56]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027b2:	f000 f821 	bl	80027f8 <HAL_RCC_GetSysClockFreq>
 80027b6:	4602      	mov	r2, r0
 80027b8:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	091b      	lsrs	r3, r3, #4
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	490a      	ldr	r1, [pc, #40]	; (80027ec <HAL_RCC_ClockConfig+0x1c8>)
 80027c4:	5ccb      	ldrb	r3, [r1, r3]
 80027c6:	fa22 f303 	lsr.w	r3, r2, r3
 80027ca:	4a09      	ldr	r2, [pc, #36]	; (80027f0 <HAL_RCC_ClockConfig+0x1cc>)
 80027cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027ce:	4b09      	ldr	r3, [pc, #36]	; (80027f4 <HAL_RCC_ClockConfig+0x1d0>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7fe fd88 	bl	80012e8 <HAL_InitTick>

  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40022000 	.word	0x40022000
 80027e8:	40021000 	.word	0x40021000
 80027ec:	08003150 	.word	0x08003150
 80027f0:	20000014 	.word	0x20000014
 80027f4:	20000018 	.word	0x20000018

080027f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b087      	sub	sp, #28
 80027fc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027fe:	2300      	movs	r3, #0
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	2300      	movs	r3, #0
 8002804:	60bb      	str	r3, [r7, #8]
 8002806:	2300      	movs	r3, #0
 8002808:	617b      	str	r3, [r7, #20]
 800280a:	2300      	movs	r3, #0
 800280c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800280e:	2300      	movs	r3, #0
 8002810:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002812:	4b1e      	ldr	r3, [pc, #120]	; (800288c <HAL_RCC_GetSysClockFreq+0x94>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f003 030c 	and.w	r3, r3, #12
 800281e:	2b04      	cmp	r3, #4
 8002820:	d002      	beq.n	8002828 <HAL_RCC_GetSysClockFreq+0x30>
 8002822:	2b08      	cmp	r3, #8
 8002824:	d003      	beq.n	800282e <HAL_RCC_GetSysClockFreq+0x36>
 8002826:	e027      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002828:	4b19      	ldr	r3, [pc, #100]	; (8002890 <HAL_RCC_GetSysClockFreq+0x98>)
 800282a:	613b      	str	r3, [r7, #16]
      break;
 800282c:	e027      	b.n	800287e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	0c9b      	lsrs	r3, r3, #18
 8002832:	f003 030f 	and.w	r3, r3, #15
 8002836:	4a17      	ldr	r2, [pc, #92]	; (8002894 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002838:	5cd3      	ldrb	r3, [r2, r3]
 800283a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d010      	beq.n	8002868 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002846:	4b11      	ldr	r3, [pc, #68]	; (800288c <HAL_RCC_GetSysClockFreq+0x94>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	0c5b      	lsrs	r3, r3, #17
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	4a11      	ldr	r2, [pc, #68]	; (8002898 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002852:	5cd3      	ldrb	r3, [r2, r3]
 8002854:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a0d      	ldr	r2, [pc, #52]	; (8002890 <HAL_RCC_GetSysClockFreq+0x98>)
 800285a:	fb03 f202 	mul.w	r2, r3, r2
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	fbb2 f3f3 	udiv	r3, r2, r3
 8002864:	617b      	str	r3, [r7, #20]
 8002866:	e004      	b.n	8002872 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a0c      	ldr	r2, [pc, #48]	; (800289c <HAL_RCC_GetSysClockFreq+0xa4>)
 800286c:	fb02 f303 	mul.w	r3, r2, r3
 8002870:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	613b      	str	r3, [r7, #16]
      break;
 8002876:	e002      	b.n	800287e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002878:	4b05      	ldr	r3, [pc, #20]	; (8002890 <HAL_RCC_GetSysClockFreq+0x98>)
 800287a:	613b      	str	r3, [r7, #16]
      break;
 800287c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800287e:	693b      	ldr	r3, [r7, #16]
}
 8002880:	4618      	mov	r0, r3
 8002882:	371c      	adds	r7, #28
 8002884:	46bd      	mov	sp, r7
 8002886:	bc80      	pop	{r7}
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	40021000 	.word	0x40021000
 8002890:	007a1200 	.word	0x007a1200
 8002894:	08003168 	.word	0x08003168
 8002898:	08003178 	.word	0x08003178
 800289c:	003d0900 	.word	0x003d0900

080028a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028a4:	4b02      	ldr	r3, [pc, #8]	; (80028b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80028a6:	681b      	ldr	r3, [r3, #0]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr
 80028b0:	20000014 	.word	0x20000014

080028b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028b8:	f7ff fff2 	bl	80028a0 <HAL_RCC_GetHCLKFreq>
 80028bc:	4602      	mov	r2, r0
 80028be:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	0a1b      	lsrs	r3, r3, #8
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	4903      	ldr	r1, [pc, #12]	; (80028d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ca:	5ccb      	ldrb	r3, [r1, r3]
 80028cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40021000 	.word	0x40021000
 80028d8:	08003160 	.word	0x08003160

080028dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028e0:	f7ff ffde 	bl	80028a0 <HAL_RCC_GetHCLKFreq>
 80028e4:	4602      	mov	r2, r0
 80028e6:	4b05      	ldr	r3, [pc, #20]	; (80028fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	0adb      	lsrs	r3, r3, #11
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	4903      	ldr	r1, [pc, #12]	; (8002900 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028f2:	5ccb      	ldrb	r3, [r1, r3]
 80028f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40021000 	.word	0x40021000
 8002900:	08003160 	.word	0x08003160

08002904 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800290c:	4b0a      	ldr	r3, [pc, #40]	; (8002938 <RCC_Delay+0x34>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a0a      	ldr	r2, [pc, #40]	; (800293c <RCC_Delay+0x38>)
 8002912:	fba2 2303 	umull	r2, r3, r2, r3
 8002916:	0a5b      	lsrs	r3, r3, #9
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	fb02 f303 	mul.w	r3, r2, r3
 800291e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002920:	bf00      	nop
  }
  while (Delay --);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	1e5a      	subs	r2, r3, #1
 8002926:	60fa      	str	r2, [r7, #12]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1f9      	bne.n	8002920 <RCC_Delay+0x1c>
}
 800292c:	bf00      	nop
 800292e:	bf00      	nop
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr
 8002938:	20000014 	.word	0x20000014
 800293c:	10624dd3 	.word	0x10624dd3

08002940 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002948:	2300      	movs	r3, #0
 800294a:	613b      	str	r3, [r7, #16]
 800294c:	2300      	movs	r3, #0
 800294e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	2b00      	cmp	r3, #0
 800295a:	d07d      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800295c:	2300      	movs	r3, #0
 800295e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002960:	4b4f      	ldr	r3, [pc, #316]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002962:	69db      	ldr	r3, [r3, #28]
 8002964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10d      	bne.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800296c:	4b4c      	ldr	r3, [pc, #304]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800296e:	69db      	ldr	r3, [r3, #28]
 8002970:	4a4b      	ldr	r2, [pc, #300]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002976:	61d3      	str	r3, [r2, #28]
 8002978:	4b49      	ldr	r3, [pc, #292]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800297a:	69db      	ldr	r3, [r3, #28]
 800297c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002980:	60bb      	str	r3, [r7, #8]
 8002982:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002984:	2301      	movs	r3, #1
 8002986:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002988:	4b46      	ldr	r3, [pc, #280]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002990:	2b00      	cmp	r3, #0
 8002992:	d118      	bne.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002994:	4b43      	ldr	r3, [pc, #268]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a42      	ldr	r2, [pc, #264]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800299a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800299e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029a0:	f7fe fce4 	bl	800136c <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a6:	e008      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a8:	f7fe fce0 	bl	800136c <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b64      	cmp	r3, #100	; 0x64
 80029b4:	d901      	bls.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e06d      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ba:	4b3a      	ldr	r3, [pc, #232]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0f0      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029c6:	4b36      	ldr	r3, [pc, #216]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ce:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d02e      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d027      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029e4:	4b2e      	ldr	r3, [pc, #184]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029ec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029ee:	4b2e      	ldr	r3, [pc, #184]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029f0:	2201      	movs	r2, #1
 80029f2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029f4:	4b2c      	ldr	r3, [pc, #176]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80029fa:	4a29      	ldr	r2, [pc, #164]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d014      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0a:	f7fe fcaf 	bl	800136c <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a10:	e00a      	b.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a12:	f7fe fcab 	bl	800136c <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e036      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a28:	4b1d      	ldr	r3, [pc, #116]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0ee      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a34:	4b1a      	ldr	r3, [pc, #104]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	4917      	ldr	r1, [pc, #92]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a46:	7dfb      	ldrb	r3, [r7, #23]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d105      	bne.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a4c:	4b14      	ldr	r3, [pc, #80]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	4a13      	ldr	r2, [pc, #76]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a56:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d008      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a64:	4b0e      	ldr	r3, [pc, #56]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	490b      	ldr	r1, [pc, #44]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0310 	and.w	r3, r3, #16
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d008      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a82:	4b07      	ldr	r3, [pc, #28]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	4904      	ldr	r1, [pc, #16]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3718      	adds	r7, #24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	40007000 	.word	0x40007000
 8002aa8:	42420440 	.word	0x42420440

08002aac <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b088      	sub	sp, #32
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	617b      	str	r3, [r7, #20]
 8002ab8:	2300      	movs	r3, #0
 8002aba:	61fb      	str	r3, [r7, #28]
 8002abc:	2300      	movs	r3, #0
 8002abe:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b10      	cmp	r3, #16
 8002acc:	d00a      	beq.n	8002ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b10      	cmp	r3, #16
 8002ad2:	f200 808a 	bhi.w	8002bea <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d045      	beq.n	8002b68 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d075      	beq.n	8002bce <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002ae2:	e082      	b.n	8002bea <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002ae4:	4b46      	ldr	r3, [pc, #280]	; (8002c00 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002aea:	4b45      	ldr	r3, [pc, #276]	; (8002c00 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d07b      	beq.n	8002bee <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	0c9b      	lsrs	r3, r3, #18
 8002afa:	f003 030f 	and.w	r3, r3, #15
 8002afe:	4a41      	ldr	r2, [pc, #260]	; (8002c04 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002b00:	5cd3      	ldrb	r3, [r2, r3]
 8002b02:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d015      	beq.n	8002b3a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b0e:	4b3c      	ldr	r3, [pc, #240]	; (8002c00 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	0c5b      	lsrs	r3, r3, #17
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	4a3b      	ldr	r2, [pc, #236]	; (8002c08 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002b1a:	5cd3      	ldrb	r3, [r2, r3]
 8002b1c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00d      	beq.n	8002b44 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002b28:	4a38      	ldr	r2, [pc, #224]	; (8002c0c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	fb02 f303 	mul.w	r3, r2, r3
 8002b36:	61fb      	str	r3, [r7, #28]
 8002b38:	e004      	b.n	8002b44 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	4a34      	ldr	r2, [pc, #208]	; (8002c10 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002b3e:	fb02 f303 	mul.w	r3, r2, r3
 8002b42:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002b44:	4b2e      	ldr	r3, [pc, #184]	; (8002c00 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b50:	d102      	bne.n	8002b58 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	61bb      	str	r3, [r7, #24]
      break;
 8002b56:	e04a      	b.n	8002bee <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	4a2d      	ldr	r2, [pc, #180]	; (8002c14 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b62:	085b      	lsrs	r3, r3, #1
 8002b64:	61bb      	str	r3, [r7, #24]
      break;
 8002b66:	e042      	b.n	8002bee <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002b68:	4b25      	ldr	r3, [pc, #148]	; (8002c00 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b78:	d108      	bne.n	8002b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d003      	beq.n	8002b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002b84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b88:	61bb      	str	r3, [r7, #24]
 8002b8a:	e01f      	b.n	8002bcc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b96:	d109      	bne.n	8002bac <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002b98:	4b19      	ldr	r3, [pc, #100]	; (8002c00 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d003      	beq.n	8002bac <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002ba4:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002ba8:	61bb      	str	r3, [r7, #24]
 8002baa:	e00f      	b.n	8002bcc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bb6:	d11c      	bne.n	8002bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002bb8:	4b11      	ldr	r3, [pc, #68]	; (8002c00 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d016      	beq.n	8002bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002bc4:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002bc8:	61bb      	str	r3, [r7, #24]
      break;
 8002bca:	e012      	b.n	8002bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002bcc:	e011      	b.n	8002bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002bce:	f7ff fe85 	bl	80028dc <HAL_RCC_GetPCLK2Freq>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	4b0a      	ldr	r3, [pc, #40]	; (8002c00 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	0b9b      	lsrs	r3, r3, #14
 8002bda:	f003 0303 	and.w	r3, r3, #3
 8002bde:	3301      	adds	r3, #1
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be6:	61bb      	str	r3, [r7, #24]
      break;
 8002be8:	e004      	b.n	8002bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002bea:	bf00      	nop
 8002bec:	e002      	b.n	8002bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002bee:	bf00      	nop
 8002bf0:	e000      	b.n	8002bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002bf2:	bf00      	nop
    }
  }
  return (frequency);
 8002bf4:	69bb      	ldr	r3, [r7, #24]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3720      	adds	r7, #32
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40021000 	.word	0x40021000
 8002c04:	0800317c 	.word	0x0800317c
 8002c08:	0800318c 	.word	0x0800318c
 8002c0c:	007a1200 	.word	0x007a1200
 8002c10:	003d0900 	.word	0x003d0900
 8002c14:	aaaaaaab 	.word	0xaaaaaaab

08002c18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e042      	b.n	8002cb0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d106      	bne.n	8002c44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7fe fa9c 	bl	800117c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2224      	movs	r2, #36	; 0x24
 8002c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68da      	ldr	r2, [r3, #12]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 f9af 	bl	8002fc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	691a      	ldr	r2, [r3, #16]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	695a      	ldr	r2, [r3, #20]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68da      	ldr	r2, [r3, #12]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08a      	sub	sp, #40	; 0x28
 8002cbc:	af02      	add	r7, sp, #8
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	603b      	str	r3, [r7, #0]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b20      	cmp	r3, #32
 8002cd6:	d16d      	bne.n	8002db4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d002      	beq.n	8002ce4 <HAL_UART_Transmit+0x2c>
 8002cde:	88fb      	ldrh	r3, [r7, #6]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e066      	b.n	8002db6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2221      	movs	r2, #33	; 0x21
 8002cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cf6:	f7fe fb39 	bl	800136c <HAL_GetTick>
 8002cfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	88fa      	ldrh	r2, [r7, #6]
 8002d00:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	88fa      	ldrh	r2, [r7, #6]
 8002d06:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d10:	d108      	bne.n	8002d24 <HAL_UART_Transmit+0x6c>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d104      	bne.n	8002d24 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	61bb      	str	r3, [r7, #24]
 8002d22:	e003      	b.n	8002d2c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d2c:	e02a      	b.n	8002d84 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	2200      	movs	r2, #0
 8002d36:	2180      	movs	r1, #128	; 0x80
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f000 f8d2 	bl	8002ee2 <UART_WaitOnFlagUntilTimeout>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e036      	b.n	8002db6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10b      	bne.n	8002d66 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	881b      	ldrh	r3, [r3, #0]
 8002d52:	461a      	mov	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	3302      	adds	r3, #2
 8002d62:	61bb      	str	r3, [r7, #24]
 8002d64:	e007      	b.n	8002d76 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	781a      	ldrb	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	3301      	adds	r3, #1
 8002d74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1cf      	bne.n	8002d2e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	9300      	str	r3, [sp, #0]
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	2200      	movs	r2, #0
 8002d96:	2140      	movs	r1, #64	; 0x40
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f000 f8a2 	bl	8002ee2 <UART_WaitOnFlagUntilTimeout>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e006      	b.n	8002db6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2220      	movs	r2, #32
 8002dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002db0:	2300      	movs	r3, #0
 8002db2:	e000      	b.n	8002db6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002db4:	2302      	movs	r3, #2
  }
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3720      	adds	r7, #32
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b08a      	sub	sp, #40	; 0x28
 8002dc2:	af02      	add	r7, sp, #8
 8002dc4:	60f8      	str	r0, [r7, #12]
 8002dc6:	60b9      	str	r1, [r7, #8]
 8002dc8:	603b      	str	r3, [r7, #0]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b20      	cmp	r3, #32
 8002ddc:	d17c      	bne.n	8002ed8 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d002      	beq.n	8002dea <HAL_UART_Receive+0x2c>
 8002de4:	88fb      	ldrh	r3, [r7, #6]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e075      	b.n	8002eda <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2222      	movs	r2, #34	; 0x22
 8002df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e02:	f7fe fab3 	bl	800136c <HAL_GetTick>
 8002e06:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	88fa      	ldrh	r2, [r7, #6]
 8002e0c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	88fa      	ldrh	r2, [r7, #6]
 8002e12:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e1c:	d108      	bne.n	8002e30 <HAL_UART_Receive+0x72>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d104      	bne.n	8002e30 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8002e26:	2300      	movs	r3, #0
 8002e28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	61bb      	str	r3, [r7, #24]
 8002e2e:	e003      	b.n	8002e38 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e34:	2300      	movs	r3, #0
 8002e36:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002e38:	e043      	b.n	8002ec2 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	2200      	movs	r2, #0
 8002e42:	2120      	movs	r1, #32
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f000 f84c 	bl	8002ee2 <UART_WaitOnFlagUntilTimeout>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e042      	b.n	8002eda <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10c      	bne.n	8002e74 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	3302      	adds	r3, #2
 8002e70:	61bb      	str	r3, [r7, #24]
 8002e72:	e01f      	b.n	8002eb4 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e7c:	d007      	beq.n	8002e8e <HAL_UART_Receive+0xd0>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10a      	bne.n	8002e9c <HAL_UART_Receive+0xde>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d106      	bne.n	8002e9c <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	701a      	strb	r2, [r3, #0]
 8002e9a:	e008      	b.n	8002eae <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1b6      	bne.n	8002e3a <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	e000      	b.n	8002eda <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002ed8:	2302      	movs	r3, #2
  }
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3720      	adds	r7, #32
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b090      	sub	sp, #64	; 0x40
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	60f8      	str	r0, [r7, #12]
 8002eea:	60b9      	str	r1, [r7, #8]
 8002eec:	603b      	str	r3, [r7, #0]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ef2:	e050      	b.n	8002f96 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ef4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efa:	d04c      	beq.n	8002f96 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002efc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d007      	beq.n	8002f12 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f02:	f7fe fa33 	bl	800136c <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d241      	bcs.n	8002f96 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	330c      	adds	r3, #12
 8002f18:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1c:	e853 3f00 	ldrex	r3, [r3]
 8002f20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	330c      	adds	r3, #12
 8002f30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f32:	637a      	str	r2, [r7, #52]	; 0x34
 8002f34:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f3a:	e841 2300 	strex	r3, r2, [r1]
 8002f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1e5      	bne.n	8002f12 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	3314      	adds	r3, #20
 8002f4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	e853 3f00 	ldrex	r3, [r3]
 8002f54:	613b      	str	r3, [r7, #16]
   return(result);
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	f023 0301 	bic.w	r3, r3, #1
 8002f5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	3314      	adds	r3, #20
 8002f64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f66:	623a      	str	r2, [r7, #32]
 8002f68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f6a:	69f9      	ldr	r1, [r7, #28]
 8002f6c:	6a3a      	ldr	r2, [r7, #32]
 8002f6e:	e841 2300 	strex	r3, r2, [r1]
 8002f72:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1e5      	bne.n	8002f46 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2220      	movs	r2, #32
 8002f86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e00f      	b.n	8002fb6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	68ba      	ldr	r2, [r7, #8]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	bf0c      	ite	eq
 8002fa6:	2301      	moveq	r3, #1
 8002fa8:	2300      	movne	r3, #0
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	461a      	mov	r2, r3
 8002fae:	79fb      	ldrb	r3, [r7, #7]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d09f      	beq.n	8002ef4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3740      	adds	r7, #64	; 0x40
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
	...

08002fc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68da      	ldr	r2, [r3, #12]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002ffa:	f023 030c 	bic.w	r3, r3, #12
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	6812      	ldr	r2, [r2, #0]
 8003002:	68b9      	ldr	r1, [r7, #8]
 8003004:	430b      	orrs	r3, r1
 8003006:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	699a      	ldr	r2, [r3, #24]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	430a      	orrs	r2, r1
 800301c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a2c      	ldr	r2, [pc, #176]	; (80030d4 <UART_SetConfig+0x114>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d103      	bne.n	8003030 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003028:	f7ff fc58 	bl	80028dc <HAL_RCC_GetPCLK2Freq>
 800302c:	60f8      	str	r0, [r7, #12]
 800302e:	e002      	b.n	8003036 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003030:	f7ff fc40 	bl	80028b4 <HAL_RCC_GetPCLK1Freq>
 8003034:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	4613      	mov	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	009a      	lsls	r2, r3, #2
 8003040:	441a      	add	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	fbb2 f3f3 	udiv	r3, r2, r3
 800304c:	4a22      	ldr	r2, [pc, #136]	; (80030d8 <UART_SetConfig+0x118>)
 800304e:	fba2 2303 	umull	r2, r3, r2, r3
 8003052:	095b      	lsrs	r3, r3, #5
 8003054:	0119      	lsls	r1, r3, #4
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	4613      	mov	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	009a      	lsls	r2, r3, #2
 8003060:	441a      	add	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	fbb2 f2f3 	udiv	r2, r2, r3
 800306c:	4b1a      	ldr	r3, [pc, #104]	; (80030d8 <UART_SetConfig+0x118>)
 800306e:	fba3 0302 	umull	r0, r3, r3, r2
 8003072:	095b      	lsrs	r3, r3, #5
 8003074:	2064      	movs	r0, #100	; 0x64
 8003076:	fb00 f303 	mul.w	r3, r0, r3
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	011b      	lsls	r3, r3, #4
 800307e:	3332      	adds	r3, #50	; 0x32
 8003080:	4a15      	ldr	r2, [pc, #84]	; (80030d8 <UART_SetConfig+0x118>)
 8003082:	fba2 2303 	umull	r2, r3, r2, r3
 8003086:	095b      	lsrs	r3, r3, #5
 8003088:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800308c:	4419      	add	r1, r3
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	4613      	mov	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	009a      	lsls	r2, r3, #2
 8003098:	441a      	add	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80030a4:	4b0c      	ldr	r3, [pc, #48]	; (80030d8 <UART_SetConfig+0x118>)
 80030a6:	fba3 0302 	umull	r0, r3, r3, r2
 80030aa:	095b      	lsrs	r3, r3, #5
 80030ac:	2064      	movs	r0, #100	; 0x64
 80030ae:	fb00 f303 	mul.w	r3, r0, r3
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	011b      	lsls	r3, r3, #4
 80030b6:	3332      	adds	r3, #50	; 0x32
 80030b8:	4a07      	ldr	r2, [pc, #28]	; (80030d8 <UART_SetConfig+0x118>)
 80030ba:	fba2 2303 	umull	r2, r3, r2, r3
 80030be:	095b      	lsrs	r3, r3, #5
 80030c0:	f003 020f 	and.w	r2, r3, #15
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	440a      	add	r2, r1
 80030ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80030cc:	bf00      	nop
 80030ce:	3710      	adds	r7, #16
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	40013800 	.word	0x40013800
 80030d8:	51eb851f 	.word	0x51eb851f

080030dc <__libc_init_array>:
 80030dc:	b570      	push	{r4, r5, r6, lr}
 80030de:	2600      	movs	r6, #0
 80030e0:	4d0c      	ldr	r5, [pc, #48]	; (8003114 <__libc_init_array+0x38>)
 80030e2:	4c0d      	ldr	r4, [pc, #52]	; (8003118 <__libc_init_array+0x3c>)
 80030e4:	1b64      	subs	r4, r4, r5
 80030e6:	10a4      	asrs	r4, r4, #2
 80030e8:	42a6      	cmp	r6, r4
 80030ea:	d109      	bne.n	8003100 <__libc_init_array+0x24>
 80030ec:	f000 f822 	bl	8003134 <_init>
 80030f0:	2600      	movs	r6, #0
 80030f2:	4d0a      	ldr	r5, [pc, #40]	; (800311c <__libc_init_array+0x40>)
 80030f4:	4c0a      	ldr	r4, [pc, #40]	; (8003120 <__libc_init_array+0x44>)
 80030f6:	1b64      	subs	r4, r4, r5
 80030f8:	10a4      	asrs	r4, r4, #2
 80030fa:	42a6      	cmp	r6, r4
 80030fc:	d105      	bne.n	800310a <__libc_init_array+0x2e>
 80030fe:	bd70      	pop	{r4, r5, r6, pc}
 8003100:	f855 3b04 	ldr.w	r3, [r5], #4
 8003104:	4798      	blx	r3
 8003106:	3601      	adds	r6, #1
 8003108:	e7ee      	b.n	80030e8 <__libc_init_array+0xc>
 800310a:	f855 3b04 	ldr.w	r3, [r5], #4
 800310e:	4798      	blx	r3
 8003110:	3601      	adds	r6, #1
 8003112:	e7f2      	b.n	80030fa <__libc_init_array+0x1e>
 8003114:	08003190 	.word	0x08003190
 8003118:	08003190 	.word	0x08003190
 800311c:	08003190 	.word	0x08003190
 8003120:	08003194 	.word	0x08003194

08003124 <memset>:
 8003124:	4603      	mov	r3, r0
 8003126:	4402      	add	r2, r0
 8003128:	4293      	cmp	r3, r2
 800312a:	d100      	bne.n	800312e <memset+0xa>
 800312c:	4770      	bx	lr
 800312e:	f803 1b01 	strb.w	r1, [r3], #1
 8003132:	e7f9      	b.n	8003128 <memset+0x4>

08003134 <_init>:
 8003134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003136:	bf00      	nop
 8003138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800313a:	bc08      	pop	{r3}
 800313c:	469e      	mov	lr, r3
 800313e:	4770      	bx	lr

08003140 <_fini>:
 8003140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003142:	bf00      	nop
 8003144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003146:	bc08      	pop	{r3}
 8003148:	469e      	mov	lr, r3
 800314a:	4770      	bx	lr
